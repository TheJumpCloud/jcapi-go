---
swagger: "2.0"
info:
  description: "V1 & V2 versions of JumpCloud's API. The next version of JumpCloud's\
    \ API. This set of endpoints allows JumpCloud customers to manage objects, groupings\
    \ and mappings. The most recent version of JumpCloud's API. This set of endpoints\
    \ allows JumpCloud customers to manage objects, groupings and mappings."
  version: "2.0"
  title: "JumpCloud APIs"
host: "console.jumpcloud.com"
basePath: "/api/v2"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /activedirectories/{activedirectory_id}/associations:
    get:
      tags:
      - "Graph"
      - "Active Directory"
      summary: "List the associations of an Active Directory instance"
      description: "This endpoint returns the direct associations of this Active Directory\
        \ instance.\n\nA direct association can be a non-homogenous relationship between\
        \ 2 different objects. For example Active Directory and Users.\n\n\n#### Sample\
        \ Request\n```\ncurl -X GET 'https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/associations?targets=user\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_activeDirectoryAssociationsList"
      parameters:
      - name: "activedirectory_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ActivedirectoryId"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_activeDirectoryAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "Active Directory"
      summary: "Manage the associations of an Active Directory instance"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ an Active Directory instance.\n\nA direct association can be a non-homogenous\
        \ relationship between 2 different objects. For example Active Directory and\
        \ Users.\n\n#### Sample Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/activedirectories/{AD_Instance_ID}/associations\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n        \"op\": \"add\",\n\
        \        \"type\": \"user\",\n        \"id\": \"{User_ID}\"\n}\n'\n```"
      operationId: "graph_activeDirectoryAssociationsPost"
      parameters:
      - name: "activedirectory_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ActivedirectoryId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: ""
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_activeDirectoryAssociationsPost"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /activedirectories:
    get:
      tags:
      - "Active Directory"
      summary: "List Active Directories"
      description: "This endpoint allows you to list all your Active Directory Instances.\n\
        \n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/activedirectories/\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "activedirectories_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/active-directory-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "activedirectories_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Active Directory"
      summary: "Create a new Active Directory"
      description: "This endpoint allows you to create a new Active Directory.\n\n\
        \n#### Sample Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/activedirectories/\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n        \"domain\": \"{DC=AD_domain_name;DC=com}\"\
        \n}\n'\n```"
      operationId: "activedirectories_post"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/active-directory-input"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/active-directory-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "activedirectories_post"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /activedirectories/{id}:
    get:
      tags:
      - "Active Directory"
      summary: "Get an Active Directory"
      description: "This endpoint returns a specific Active Directory.\n\n#### Sample\
        \ Request\n\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "activedirectories_get"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of this Active Directory instance."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/active-directory-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "activedirectories_get"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      tags:
      - "Active Directory"
      summary: "Delete an Active Directory"
      description: "This endpoint allows you to delete an Active Directory Instance.\n\
        \n#### Sample Request\n```\ncurl -X DELETE https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY'\n  ```"
      operationId: "activedirectories_delete"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of this Active Directory instance."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: ""
      security:
      - x-api-key: []
      x-stoplight:
        id: "activedirectories_delete"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /activedirectories/{activedirectory_id}/usergroups:
    get:
      tags:
      - "Graph"
      - "Active Directory"
      summary: "List the User Groups bound to an Active Directory instance"
      description: "This endpoint will return all Users Groups bound to an Active\
        \ Directory instance, either directly or indirectly, essentially traversing\
        \ the JumpCloud Graph for your Organization.\n\nEach element will contain\
        \ the group's type, id, attributes and paths.\n\nThe `attributes` object is\
        \ a key/value hash of compiled graph attributes for all paths followed.\n\n\
        The `paths` array enumerates each path from this Active Directory instance\
        \ to the corresponding User Group; this array represents all grouping and/or\
        \ associations that would have to be removed to deprovision the User Group\
        \ from this Active Directory instance.\n\nSee `/members` and `/associations`\
        \ endpoints to manage those collections.\n\n#### Sample Request\n```\ncurl\
        \ -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/usergroups\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_activeDirectoryTraverseUserGroup"
      parameters:
      - name: "activedirectory_id"
        in: "path"
        description: "ObjectID of the Active Directory instance."
        required: true
        type: "string"
        x-exportParamName: "ActivedirectoryId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_activeDirectoryTraverseUserGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /applications/{application_id}/associations:
    get:
      tags:
      - "Graph"
      - "Applications"
      summary: "List the associations of an Application"
      description: "This endpoint will return the _direct_ associations of an Application.\
        \ A direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example Applications and User Groups.\n\n\n#### Sample Request\n\
        ```\ncurl -X GET 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations?targets=user_group\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_applicationAssociationsList"
      parameters:
      - name: "application_id"
        in: "path"
        description: "ObjectID of the Application."
        required: true
        type: "string"
        x-exportParamName: "ApplicationId"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_applicationAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "Applications"
      summary: "Manage the associations of an Application"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ an Application. A direct association can be a non-homogenous relationship\
        \ between 2 different objects. for example Application and User Groups.\n\n\
        #### Sample Request\n```\ncurl -X POST 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations'\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"user_group\",\n    \"id\": \"{Group_ID}\"\n}'\n```"
      operationId: "graph_applicationAssociationsPost"
      parameters:
      - name: "application_id"
        in: "path"
        description: "ObjectID of the Application."
        required: true
        type: "string"
        x-exportParamName: "ApplicationId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_applicationAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /applications/{application_id}/users:
    get:
      tags:
      - "Graph"
      - "Applications"
      summary: "List the Users bound to an Application"
      description: "This endpoint will return all Users bound to an Application, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this Application to the corresponding User; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the User from this Application.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/users\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_applicationTraverseUser"
      parameters:
      - name: "application_id"
        in: "path"
        description: "ObjectID of the Application."
        required: true
        type: "string"
        x-exportParamName: "ApplicationId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_applicationTraverseUser"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /applications/{application_id}/usergroups:
    get:
      tags:
      - "Graph"
      - "Applications"
      summary: "List the User Groups bound to an Application"
      description: "This endpoint will return all Users Groups bound to an Application,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the group's type, id,\
        \ attributes and paths.\n\nThe `attributes` object is a key/value hash of\
        \ compiled graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \  each path from this Application to the corresponding User Group; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the User Group from this Application.\n\nSee `/members` and\
        \ `/associations` endpoints to manage those collections.\n\n#### Sample Request\n\
        ```\ncurl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/usergroups\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_applicationTraverseUserGroup"
      parameters:
      - name: "application_id"
        in: "path"
        description: "ObjectID of the Application."
        required: true
        type: "string"
        x-exportParamName: "ApplicationId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_applicationTraverseUserGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /bulk/users/{job_id}/results:
    get:
      tags:
      - "Bulk Job Requests"
      summary: "List Bulk Users Create Results"
      description: "This endpoint will return the results of particular import job\
        \ request.\n\n###Sample Request \n```\ncurl -X GET \\\n  https://console.jumpcloud.com/api/v2/bulk/users/{ImportJobID}/results\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "bulk_usersCreateResults"
      parameters:
      - name: "job_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "JobId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/job-workresult"
      security:
      - x-api-key: []
      x-stoplight:
        id: "bulk_usersCreateResults"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /bulk/users:
    post:
      tags:
      - "Bulk Job Requests"
      summary: "Bulk Users Create"
      description: "The endpoint allows you to create a bulk job to asynchronously\
        \ create users.\n\n#### Sample Request \n```\ncurl -X POST https://console.jumpcloud.com/api/v2/bulk/users\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '[\n\t{\n\t\t\"email\":\"{email}\"\
        ,\n\t\t\"firstname\":\"{firstname}\",\n\t\t\"lastname\":\"{firstname}\",\n\
        \t\t\"username\":\"{username}\",\n\t\t\"attributes\":[\n\t\t\t{\"name\":\"\
        EmployeeID\",\"value\":\"0000\"},\n\t\t\t{\"name\":\"Custom\",\"value\":\"\
        attribute\"}\n\t\t]\n\t}\n]\n```"
      operationId: "bulk_usersCreate"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/bulk-user-create"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/job-id"
      security:
      - x-api-key: []
      x-stoplight:
        id: "bulk_usersCreate"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /jobs/{id}/results:
    get:
      tags:
      - "Bulk Job Requests"
      summary: "List Job Results"
      description: "This endpoint will return the results of particular import job\
        \ request.\n\n###Sample Request \n```\ncurl -X GET \\\n  https://console.jumpcloud.com/api/v2/jobs/{ImportJobID}/results\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "jobs_results"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/job-workresult"
      security:
      - x-api-key: []
      x-stoplight:
        id: "jobs_results"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /jobs/{id}:
    get:
      tags:
      - "Bulk Job Requests"
      summary: "Get Job (incomplete)"
      description: "**This endpoint is not complete and should remain hidden as it's\
        \ not functional yet.**"
      operationId: "jobs_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/job-details"
      security:
      - x-api-key: []
      x-stoplight:
        id: "jobs_get"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /commands/{command_id}/associations:
    get:
      tags:
      - "Graph"
      - "Commands"
      summary: "List the associations of a Command"
      description: "This endpoint will return the _direct_ associations of this Command.\n\
        \nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example Commands and User Groups.\n\n\n#### Sample Request\n\
        ```\ncurl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations?targets=system_group\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_commandAssociationsList"
      parameters:
      - name: "command_id"
        in: "path"
        description: "ObjectID of the Command."
        required: true
        type: "string"
        x-exportParamName: "CommandId"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_commandAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "Commands"
      summary: "Manage the associations of a Command"
      description: "This endpoint will allow you to manage the _direct_ associations\
        \ of this Command.\n\nA direct association can be a non-homogenous relationship\
        \ between 2 different objects. for example Commands and User Groups.\n\n\n\
        #### Sample Request\n```\n curl -X POST https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"system_group\",\n    \"id\": \"Group_ID\"\n}'\n```"
      operationId: "graph_commandAssociationsPost"
      parameters:
      - name: "command_id"
        in: "path"
        description: "ObjectID of the Command."
        required: true
        type: "string"
        x-exportParamName: "CommandId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_204"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_commandAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /commands/{command_id}/systems:
    get:
      tags:
      - "Graph"
      - "Commands"
      summary: "List the Systems bound to a Command"
      description: "This endpoint will return all Systems bound to a Command, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization.\n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this Command to the corresponding System; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the System from this Command.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systems\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_commandTraverseSystem"
      parameters:
      - name: "command_id"
        in: "path"
        description: "ObjectID of the Command."
        required: true
        type: "string"
        x-exportParamName: "CommandId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_commandTraverseSystem"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /commands/{command_id}/systemgroups:
    get:
      tags:
      - "Graph"
      - "Commands"
      summary: "List the System Groups bound to a Command"
      description: "This endpoint will return all System Groups bound to a Command,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the group's type, id,\
        \ attributes and paths.\n\nThe `attributes` object is a key/value hash of\
        \ compiled graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \ each path from this Command to the corresponding System Group; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the System Group from this Command.\n\nSee `/members` and\
        \ `/associations` endpoints to manage those collections.\n\n#### Sample Request\n\
        ```\ncurl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systemgroups\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_commandTraverseSystemGroup"
      parameters:
      - name: "command_id"
        in: "path"
        description: "ObjectID of the Command."
        required: true
        type: "string"
        x-exportParamName: "CommandId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_commandTraverseSystemGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /directories:
    get:
      tags:
      - "Directories"
      summary: "List All Directories"
      description: "This endpoint returns all active directories (LDAP, O365 Suite,\
        \ G-Suite).\n\n#### Sample Request\n```\n curl -X GET https://console.jumpcloud.com/api/v2/directories\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "directories_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Directory"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - x-api-key: []
      x-stoplight:
        id: "directories_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /groups:
    get:
      tags:
      - "Groups"
      summary: "List All Groups"
      description: "This endpoint returns all Groups that exist in your organization.\n\
        \n#### Available filter fields:\n  - `name`\n  - `disabled`\n  - `type`\n\n\
        #### Sample Request\n\n```\n  curl -X GET \\\n  https://console.jumpcloud.com/api/v2/groups\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "groups_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /gsuites/{gsuite_id}/associations:
    get:
      tags:
      - "Graph"
      - "G Suite"
      summary: "List the associations of a G Suite instance"
      description: "This endpoint returns the _direct_ associations of this G Suite\
        \ instance.\n\nA direct association can be a non-homogenous relationship between\
        \ 2 different objects. for example G Suite and Users.\n\n\n#### Sample Request\n\
        ```\ncurl -X GET 'https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations?targets=user_group\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_gSuiteAssociationsList"
      parameters:
      - name: "gsuite_id"
        in: "path"
        description: "ObjectID of the G Suite instance."
        required: true
        type: "string"
        x-exportParamName: "GsuiteId"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_gSuiteAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "G Suite"
      summary: "Manage the associations of a G Suite instance"
      description: "This endpoint returns the _direct_ associations of this G Suite\
        \ instance.\n\nA direct association can be a non-homogenous relationship between\
        \ 2 different objects. for example G Suite and Users.\n\n\n#### Sample Request\n\
        ```\ncurl -X POST https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"user_group\",\n    \"id\": \"{Group_ID}\"\n}'\n```"
      operationId: "graph_gSuiteAssociationsPost"
      parameters:
      - name: "gsuite_id"
        in: "path"
        description: "ObjectID of the G Suite instance."
        required: true
        type: "string"
        x-exportParamName: "GsuiteId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GraphManagementReq"
        x-exportParamName: "Body"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_gSuiteAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /gsuites/{gsuite_id}/users:
    get:
      tags:
      - "Graph"
      - "G Suite"
      summary: "List the Users bound to a G Suite instance"
      description: "This endpoint will return all Users bound to a G Suite instance,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the type, id, attributes\
        \ and paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this G Suite instance to the corresponding User; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the User from this G Suite instance.\n\nSee `/members` and `/associations`\
        \ endpoints to manage those collections.\n\n#### Sample Request\n```\n  curl\
        \ -X GET https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/users \\\
        \n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_gSuiteTraverseUser"
      parameters:
      - name: "gsuite_id"
        in: "path"
        description: "ObjectID of the G Suite instance."
        required: true
        type: "string"
        x-exportParamName: "GsuiteId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_gSuiteTraverseUser"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /gsuites/{gsuite_id}/usergroups:
    get:
      tags:
      - "Graph"
      - "G Suite"
      summary: "List the User Groups bound to a G Suite instance"
      description: "This endpoint will return all User Groups bound to an G Suite\
        \ instance, either directly or indirectly, essentially traversing the JumpCloud\
        \ Graph for your Organization.\n\nEach element will contain the group's type,\
        \ id, attributes and paths.\n\nThe `attributes` object is a key/value hash\
        \ of compiled graph attributes for all paths followed.\n\nThe `paths` array\
        \ enumerates each path from this G Suite instance to the corresponding User\
        \ Group; this array represents all grouping and/or associations that would\
        \ have to be removed to deprovision the User Group from this G Suite instance.\n\
        \nSee `/members` and `/associations` endpoints to manage those collections.\n\
        \n#### Sample Request\n```\n  curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSuite_ID}/usergroups\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_gSuiteTraverseUserGroup"
      parameters:
      - name: "gsuite_id"
        in: "path"
        description: "ObjectID of the G Suite instance."
        required: true
        type: "string"
        x-exportParamName: "GsuiteId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_gSuiteTraverseUserGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /ldapservers/{ldapserver_id}/associations:
    get:
      tags:
      - "Graph"
      - "LDAP Servers"
      summary: "List the associations of a LDAP Server"
      description: "This endpoint returns the _direct_ associations of this LDAP Server.\n\
        \nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example LDAP and Users.\n\n#### Sample Request\n\n```\n curl\
        \ -X GET 'https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations?targets=user_group\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_ldapServerAssociationsList"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "ObjectID of the LDAP Server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_ldapServerAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "LDAP Servers"
      summary: "Manage the associations of a LDAP Server"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ a LDAP Server.\n\nA direct association can be a non-homogenous relationship\
        \ between 2 different objects. for example LDAP and Users.\n\n#### Sample\
        \ Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"user\",\n    \"id\": \"{User_ID}\"\n}'\n```"
      operationId: "graph_ldapServerAssociationsPost"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "ObjectID of the LDAP Server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_ldapServerAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /ldapservers/{ldapserver_id}/users:
    get:
      tags:
      - "Graph"
      - "LDAP Servers"
      summary: "List the Users bound to a LDAP Server"
      description: "This endpoint will return all Users bound to an LDAP Server, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization.\n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this LDAP server instance to the corresponding User; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the User from this LDAP server instance.\n\nSee `/members`\
        \ and `/associations` endpoints to manage those collections.\n\n#### Sample\
        \ Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_ldapServerTraverseUser"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "ObjectID of the LDAP Server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_ldapServerTraverseUser"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /ldapservers/{ldapserver_id}/usergroups:
    get:
      tags:
      - "Graph"
      - "LDAP Servers"
      summary: "List the User Groups bound to a LDAP Server"
      description: "This endpoint will return all Users Groups bound to a LDAP Server,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the group's type, id,\
        \ attributes and paths.\n\nThe `attributes` object is a key/value hash of\
        \ compiled graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \ each path from this LDAP server instance to the corresponding User Group;\
        \ this array represents all grouping and/or associations that would have to\
        \ be removed to deprovision the User Group from this LDAP server instance.\n\
        \nSee `/members` and `/associations` endpoints to manage those collections.\n\
        \n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/usergroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_ldapServerTraverseUserGroup"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "ObjectID of the LDAP Server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_ldapServerTraverseUserGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /ldapservers:
    get:
      tags:
      - "LDAP Servers"
      summary: "List LDAP Servers"
      description: "This endpoint returns the object IDs of your LDAP servers.\n\n\
        \n##### Sample Request\n\n```\n  curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'"
      operationId: "ldapservers_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ldap-server-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "ldapservers_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /ldapservers/{id}:
    get:
      tags:
      - "LDAP Servers"
      summary: "Get LDAP Server"
      description: "This endpoint returns a specific LDAP server.\n\n##### Sample\
        \ Request\n\n```\n curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "ldapservers_get"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique identifier of the LDAP server."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ldap-server-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "ldapservers_get"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /office365s/{office365_id}/associations:
    get:
      tags:
      - "Graph"
      - "Office 365"
      summary: "List the associations of an Office 365 instance"
      description: "This endpoint returns _direct_ associations of an Office 365 instance.\n\
        \n\nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example Office 365 and Users.\n\n#### Sample Request\n```\n\
        curl -X GET 'https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations?targets=user_group\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_office365AssociationsList"
      parameters:
      - name: "office365_id"
        in: "path"
        description: "ObjectID of the Office 365 instance."
        required: true
        type: "string"
        x-exportParamName: "Office365Id"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_office365AssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "Office 365"
      summary: "Manage the associations of an Office 365 instance"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ a Office 365 instance.\n\nA direct association can be a non-homogenous relationship\
        \ between 2 different objects. for example Office 365 and Users.\n\n#### Sample\
        \ Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"user_group\",\n    \"id\": \"{Group_ID}\"\n}'\n```"
      operationId: "graph_office365AssociationsPost"
      parameters:
      - name: "office365_id"
        in: "path"
        description: "ObjectID of the Office 365 instance."
        required: true
        type: "string"
        x-exportParamName: "Office365Id"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_office365AssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /office365s/{office365_id}/users:
    get:
      tags:
      - "Graph"
      - "Office 365"
      summary: "List the Users bound to an Office 365 instance"
      description: "This endpoint will return all Users bound to an Office 365 instance,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the type, id, attributes\
        \ and paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this Office 365 instance to the corresponding User; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the User from this Office 365 instance.\n\nSee `/members`\
        \ and `/associations` endpoints to manage those collections.\n\n#### Sample\
        \ Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/users\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_office365TraverseUser"
      parameters:
      - name: "office365_id"
        in: "path"
        description: "ObjectID of the Office 365 suite."
        required: true
        type: "string"
        x-exportParamName: "Office365Id"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_office365TraverseUser"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /office365s/{office365_id}/usergroups:
    get:
      tags:
      - "Graph"
      - "Office 365"
      summary: "List the User Groups bound to an Office 365 instance"
      description: "This endpoint will return all Users Groups bound to an Office\
        \ 365 instance, either directly or indirectly, essentially traversing the\
        \ JumpCloud Graph for your Organization.\n\nEach element will contain the\
        \ group's type, id, attributes and paths.\n\nThe `attributes` object is a\
        \ key/value hash of compiled graph attributes for all paths followed.\n\n\
        The `paths` array enumerates each path from this Office 365 instance to the\
        \ corresponding User Group; this array represents all grouping and/or associations\
        \ that would have to be removed to deprovision the User Group from this Office\
        \ 365 instance.\n\nSee `/members` and `/associations` endpoints to manage\
        \ those collections.\n\n#### Sample Request\n```\n  curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID/usergroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_office365TraverseUserGroup"
      parameters:
      - name: "office365_id"
        in: "path"
        description: "ObjectID of the Office 365 suite."
        required: true
        type: "string"
        x-exportParamName: "Office365Id"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_office365TraverseUserGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policies:
    get:
      tags:
      - "Policies"
      summary: "Lists all the Policies"
      description: "This endpoint returns all policies.\n\n##### Sample Request\n\n\
        ```\n curl -X GET  https://console.jumpcloud.com/api/v2/policies \\\n  -H\
        \ 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n\
        \  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "policies_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Policy"
        500:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policies_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Policies"
      summary: "Create a new Policy"
      description: "This endpoint allows you to create a policy. Given the amount\
        \ of configurable parameters required to create a Policy, we suggest you use\
        \ the JumpCloud Admin Console to create new policies.\n\n##### Sample Request\
        \ \n```\ncurl -X POST https://console.jumpcloud.com/api/v2/policies \\\n \
        \ -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{ \n  {Policy_Parameters}\n}'\n\
        \n```"
      operationId: "policies_post"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PolicyRequest"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/PolicyWithDetails"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policies_post"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policies/{id}:
    get:
      tags:
      - "Policies"
      summary: "Gets a specific Policy."
      description: "This endpoint returns a specific policy.\n\n###### Sample Request\n\
        \n```\n  curl -X GET https://console.jumpcloud.com/api/v2/policies/{PolicyID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "policies_get"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the Policy object."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PolicyWithDetails"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policies_get"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    put:
      tags:
      - "Policies"
      summary: "Update an existing Policy"
      description: "This endpoint allows you to update a policy. Given the amount\
        \ of configurable parameters required to update a Policy, we suggest you use\
        \ the JumpCloud Admin Console to create new policies.\n\n\n##### Sample Request\n\
        ```\ncurl -X PUT https://console.jumpcloud.com/api/v2/policies/59fced45c9118022172547ff\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY' \\\n  -d '{\n    {Policy_Parameters}\n}'\n\
        ```"
      operationId: "policies_put"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the Policy object."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PolicyRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Policy"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policies_put"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      tags:
      - "Policies"
      summary: "Deletes a Policy"
      description: "This endpoint allows you to delete a policy.\n\n#### Sample Request\n\
        \n```\ncurl -X DELETE https://console.jumpcloud.com/api/v2/policies/5a837ecd232e110d4291e6b9\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "policies_delete"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the Policy object."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "No Content"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policies_delete"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policyresults:
    get:
      tags:
      - "Policies"
      summary: "Lists all the policy results for an organization."
      description: "This endpoint returns all policies results for an Organization.\
        \ \n\n##### Sample Request\n\n```\n curl -X GET https://console.jumpcloud.com/api/v2/policyresults\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "policyresults_list"
      parameters:
      - name: "aggregate"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Aggregate"
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PolicyResult"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policyresults_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policies/{policy_id}/policyresults:
    get:
      tags:
      - "Policies"
      summary: "Lists all the policy results of a policy."
      description: "This endpoint returns all policies results for a specific policy.\
        \ \n\n##### Sample Request\n\n```\n curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policyresults\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "policyresults_list"
      parameters:
      - name: "policy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "aggregate"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Aggregate"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PolicyResult"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policyresults_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policies/{policy_id}/policystatuses:
    get:
      tags:
      - "Policies"
      summary: "Lists the latest policy results of a policy."
      description: "This endpoint returns the latest policies results for a specific\
        \ policy. \n\n##### Sample Request\n\n```\n curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policystatuses\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "policystatuses_list"
      parameters:
      - name: "policy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PolicyResult"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policystatuses_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systems/{system_id}/policystatuses:
    get:
      tags:
      - "Graph"
      - "Policies"
      summary: "List the policy statuses for a system"
      description: "This endpoint returns the policy results for a particular system.\n\
        \n##### Sample Request\n\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/policystatuses\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "policystatuses_list"
      parameters:
      - name: "system_id"
        in: "path"
        description: "ObjectID of the System."
        required: true
        type: "string"
        x-exportParamName: "SystemId"
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PolicyResult"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policystatuses_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policies/{policy_id}/systems:
    get:
      tags:
      - "Graph"
      - "Policies"
      summary: "List the Systems bound to a Policy"
      description: "This endpoint will return all Systems bound to a Policy, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this Policy to the corresponding System; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the System from this Policy.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systems\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_policyTraverseSystem"
      parameters:
      - name: "policy_id"
        in: "path"
        description: "ObjectID of the Command."
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_policyTraverseSystem"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policies/{policy_id}/systemgroups:
    get:
      tags:
      - "Graph"
      - "Policies"
      summary: "List the System Groups bound to a Policy"
      description: "This endpoint will return all Systems Groups bound to a Policy,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the group's type, id,\
        \ attributes and paths.\n\nThe `attributes` object is a key/value hash of\
        \ compiled graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \ each path from this Policy to the corresponding System Group; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the System Group from this Policy.\n\nSee `/members` and\
        \ `/associations` endpoints to manage those collections.\n\n#### Sample Request\n\
        ```\ncurl -X GET  https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systemgroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_policyTraverseSystemGroup"
      parameters:
      - name: "policy_id"
        in: "path"
        description: "ObjectID of the Command."
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_policyTraverseSystemGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policies/{policy_id}/associations:
    get:
      tags:
      - "Graph"
      - "Policies"
      summary: "List the associations of a Policy"
      description: "This endpoint returns the _direct_ associations of a Policy.\n\
        \nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example Policies and Systems.\n\n#### Sample Request\n```\n\
        curl -X GET 'https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations?targets=system_group\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_policyAssociationsList"
      parameters:
      - name: "policy_id"
        in: "path"
        description: "ObjectID of the Policy."
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_policyAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "Policies"
      summary: "Manage the associations of a Policy"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ a Policy.\n\nA direct association can be a non-homogenous relationship between\
        \ 2 different objects. for example Policies and Systems.\n\n#### Sample Request\n\
        ```\ncurl -X POST https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations/\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"system_group\",\n    \"id\": \"{Group_ID}\"\n}'\n```"
      operationId: "graph_policyAssociationsPost"
      parameters:
      - name: "policy_id"
        in: "path"
        description: "ObjectID of the Policy."
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: ""
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_policyAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policytemplates:
    get:
      tags:
      - "Policytemplates"
      - "Policies"
      summary: "Lists all of the Policy Templates"
      description: "This endpoint returns all policy templates.\n\n#### Sample Request\n\
        ```\ncurl -X GET https://console.jumpcloud.com/api/v2/policytemplates \\\n\
        \  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "policytemplates_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PolicyTemplate"
        500:
          description: "Unexpected error."
          schema:
            $ref: "#/definitions/Error"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policytemplates_list"
        beforeScript: null
        afterScript: "function (ctx, request, response) {\n  // Your javascript code\
          \ here.\n}"
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policytemplates/{id}:
    get:
      tags:
      - "Policytemplates"
      - "Policies"
      summary: "Get a specific Policy Template"
      description: "This endpoint returns a specific policy template.\n\n#### Sample\
        \ Request\n```\n curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}\\\
        \n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "policytemplates_get"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the Policy Template."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PolicyTemplateWithDetails"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policytemplates_get"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /policyresults/{id}:
    get:
      tags:
      - "Policies"
      summary: "Get a specific Policy Result."
      description: "This endpoint will return the policy results for a specific policy.\n\
        \n##### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/policyresults/{Policy_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "policyresults_get"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the Policy Result."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PolicyResult"
      security:
      - x-api-key: []
      x-stoplight:
        id: "policyresults_get"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /radiusservers/{radiusserver_id}/associations:
    get:
      tags:
      - "Graph"
      - "RADIUS Servers"
      summary: "List the associations of a RADIUS  Server"
      description: "This endpoint returns the _direct_ associations of a Radius Server.\n\
        \nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example Radius Servers and Users.\n\n#### Sample Request\n\
        ```\ncurl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations?targets=user_group\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_radiusServerAssociationsList"
      parameters:
      - name: "radiusserver_id"
        in: "path"
        description: "ObjectID of the Radius Server."
        required: true
        type: "string"
        x-exportParamName: "RadiusserverId"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_radiusServerAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "RADIUS Servers"
      summary: "Manage the associations of a RADIUS Server"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ a Radius Server.\n\nA direct association can be a non-homogenous relationship\
        \ between 2 different objects. for example Radius Servers and Users.\n\n####\
        \ Sample Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n\t\n\"type\":\"user\", \n\"\
        id\":\"{USER_ID}\", \n\"op\":\"add\"\n\t\n}'\n```"
      operationId: "graph_radiusServerAssociationsPost"
      parameters:
      - name: "radiusserver_id"
        in: "path"
        description: "ObjectID of the Radius Server."
        required: true
        type: "string"
        x-exportParamName: "RadiusserverId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_radiusServerAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /radiusservers/{radiusserver_id}/users:
    get:
      tags:
      - "Graph"
      - "RADIUS Servers"
      summary: "List the Users bound to a RADIUS  Server"
      description: "This endpoint will return all Users bound to a RADIUS Server,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization. \n\nEach element will contain the type, id, attributes\
        \ and paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this RADIUS server instance to the corresponding User; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the User from this RADIUS server instance.\n\nSee `/members`\
        \ and `/associations` endpoints to manage those collections.\n\n\n#### Sample\
        \ Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "graph_radiusServerTraverseUser"
      parameters:
      - name: "radiusserver_id"
        in: "path"
        description: "ObjectID of the Radius Server."
        required: true
        type: "string"
        x-exportParamName: "RadiusserverId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_radiusServerTraverseUser"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /radiusservers/{radiusserver_id}/usergroups:
    get:
      tags:
      - "Graph"
      - "RADIUS Servers"
      summary: "List the User Groups bound to a RADIUS  Server"
      description: "This endpoint will return all Users Groups bound to a RADIUS Server,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization. \n\nEach element will contain the group's type, id,\
        \ attributes and paths.\n\nThe `attributes` object is a key/value hash of\
        \ compiled graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \ each path from this RADIUS server instance to the corresponding User Group;\
        \ this array represents all grouping and/or associations that would have to\
        \ be removed to deprovision the User Group from this RADIUS server instance.\n\
        \nSee `/members` and `/associations` endpoints to manage those collections.\n\
        \n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/usergroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_radiusServerTraverseUserGroup"
      parameters:
      - name: "radiusserver_id"
        in: "path"
        description: "ObjectID of the Radius Server."
        required: true
        type: "string"
        x-exportParamName: "RadiusserverId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_radiusServerTraverseUserGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /ldapservers/{ldapserver_id}/sambadomains:
    get:
      tags:
      - "Samba Domains"
      summary: "List Samba Domains"
      description: "This endpoint returns all samba domains for an LDAP server.\n\n\
        ##### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "ldapservers_sambaDomainsList"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "Unique identifier of the LDAP server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/samba-domain-output"
        default:
          description: ""
          schema:
            $ref: "#/definitions/Error"
      security:
      - x-api-key: []
      x-stoplight:
        id: "ldapservers_sambaDomainsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Samba Domains"
      summary: "Create Samba Domain"
      description: "This endpoint allows you to create a samba domain for an LDAP\
        \ server.\n\n##### Sample Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n\"sid\":\"{SID_ID}\", \n\"\
        name\":\"{WORKGROUP_NAME}\" \n}'\n```"
      operationId: "ldapservers_sambaDomainsPost"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "Unique identifier of the LDAP server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/samba-domain-input"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/samba-domain-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "ldapservers_sambaDomainsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /ldapservers/{ldapserver_id}/sambadomains/{id}:
    get:
      tags:
      - "Samba Domains"
      summary: "Get Samba Domain"
      description: "This endpoint returns a specific samba domain for an LDAP server.\n\
        \n##### Sample Request\n```\ncurl -X GET \\\n  https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "ldapservers_sambaDomainsGet"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "Unique identifier of the LDAP server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - name: "id"
        in: "path"
        description: "Unique identifier of the samba domain."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/samba-domain-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "ldapservers_sambaDomainsGet"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    put:
      tags:
      - "Samba Domains"
      summary: "Update Samba Domain"
      description: "This endpoint allows you to update the samba domain information\
        \ for an LDAP server.\n\n##### Sample Request\n```\ncurl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n\"sid\":\"{SID_ID}\", \n\"\
        name\":\"{WORKGROUP_NAME}\"\n}'\n\n```"
      operationId: "ldapservers_sambaDomainsPut"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "Unique identifier of the LDAP server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - name: "id"
        in: "path"
        description: "Unique identifier of the samba domain."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/samba-domain-input"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/samba-domain-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "ldapservers_sambaDomainsPut"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      tags:
      - "Samba Domains"
      summary: "Delete Samba Domain"
      description: "This endpoint allows you to delete a samba domain from an LDAP\
        \ server.\n\n##### Sample Request\n```\ncurl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "ldapservers_sambaDomainsDelete"
      parameters:
      - name: "ldapserver_id"
        in: "path"
        description: "Unique identifier of the LDAP server."
        required: true
        type: "string"
        x-exportParamName: "LdapserverId"
      - name: "id"
        in: "path"
        description: "Unique identifier of the samba domain."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            type: "string"
        204:
          description: ""
      security:
      - x-api-key: []
      x-stoplight:
        id: "ldapservers_sambaDomainsDelete"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systems/{system_id}/associations:
    get:
      tags:
      - "Graph"
      - "Systems"
      summary: "List the associations of a System"
      description: "This endpoint returns the _direct_ associations of a System.\n\
        \nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example Systems and Users.\n\n\n#### Sample Request\n```\n\
        curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations?targets=user\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemAssociationsList"
      parameters:
      - name: "system_id"
        in: "path"
        description: "ObjectID of the System."
        required: true
        type: "string"
        x-exportParamName: "SystemId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Date"
        in: "header"
        description: "Current date header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Date"
      - name: "Authorization"
        in: "header"
        description: "Authorization header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Authorization"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "Systems"
      summary: "Manage associations of a System"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ a System.\n\nA direct association can be a non-homogenous relationship between\
        \ 2 different objects. for example Systems and Users.\n\n\n#### Sample Request\n\
        ```\ncurl -X POST https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n   \"attributes\": {\n    \
        \  \"sudo\": {\n         \"enabled\": true,\n         \"withoutPassword\"\
        : false\n      }\n   }, \n    \"op\": \"add\",\n    \"type\": \"user\",\n\
        \    \"id\": \"UserID\"\n}'\n\n```"
      operationId: "graph_systemAssociationsPost"
      parameters:
      - name: "system_id"
        in: "path"
        description: "ObjectID of the System."
        required: true
        type: "string"
        x-exportParamName: "SystemId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SystemGraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "Date"
        in: "header"
        description: "Current date header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Date"
      - name: "Authorization"
        in: "header"
        description: "Authorization header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Authorization"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /systems/{system_id}/memberof:
    get:
      tags:
      - "Graph"
      - "Systems"
      summary: "List the parent Groups of a System"
      description: "This endpoint returns all the System Groups a System is a member\
        \ of.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/memberof\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemMemberOf"
      parameters:
      - name: "system_id"
        in: "path"
        description: "ObjectID of the System."
        required: true
        type: "string"
        x-exportParamName: "SystemId"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Date"
        in: "header"
        description: "Current date header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Date"
      - name: "Authorization"
        in: "header"
        description: "Authorization header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Authorization"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemMemberOf"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systems/{system_id}/policies:
    get:
      tags:
      - "Graph"
      - "Systems"
      summary: "List the Policies bound to a System"
      description: "This endpoint will return all Policies bound to a System, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this System to the corresponding Policy; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the Policy from this System.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\nThis endpoint is not yet public as we have\
        \ finish the code.\n\n##### Sample Request\n\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/{System_ID}/policies\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemTraversePolicy"
      parameters:
      - name: "system_id"
        in: "path"
        description: "ObjectID of the System."
        required: true
        type: "string"
        x-exportParamName: "SystemId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemTraversePolicy"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systems/{system_id}/users:
    get:
      tags:
      - "Graph"
      - "Systems"
      summary: "List the Users bound to a System"
      description: "This endpoint will return all Users bound to a System, either\
        \ directly or indirectly essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this System to the corresponding User; this array represents all\
        \ grouping and/or associations that would have to be removed to deprovision\
        \ the User from this System.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/users\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemTraverseUser"
      parameters:
      - name: "system_id"
        in: "path"
        description: "ObjectID of the System."
        required: true
        type: "string"
        x-exportParamName: "SystemId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Date"
        in: "header"
        description: "Current date header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Date"
      - name: "Authorization"
        in: "header"
        description: "Authorization header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Authorization"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemTraverseUser"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systems/{system_id}/commands:
    get:
      tags:
      - "Graph"
      - "Systems"
      summary: "List the Commands bound to a System"
      description: "This endpoint will return all Commands bound to a System, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization.\n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this System to the corresponding Command; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the Command from this System.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/commands\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemTraverseCommand"
      parameters:
      - name: "system_id"
        in: "path"
        description: "ObjectID of the System."
        required: true
        type: "string"
        x-exportParamName: "SystemId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemTraverseCommand"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systems/{system_id}/usergroups:
    get:
      tags:
      - "Graph"
      - "Systems"
      summary: "List the User Groups bound to a System"
      description: "This endpoint will return all User Groups bound to a System, either\
        \ directly or indirectly essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this System to the corresponding User Group; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the User Group from this System.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/usergroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemTraverseUserGroup"
      parameters:
      - name: "system_id"
        in: "path"
        description: "ObjectID of the System."
        required: true
        type: "string"
        x-exportParamName: "SystemId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Date"
        in: "header"
        description: "Current date header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Date"
      - name: "Authorization"
        in: "header"
        description: "Authorization header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Authorization"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemTraverseUserGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systemgroups:
    get:
      tags:
      - "System Groups"
      summary: "List all System Groups"
      description: "This endpoint returns all System Groups.\n\nAvailable filter fields:\n\
        \  - `name`\n  - `disabled`\n  - `type`\n\n#### Sample Request\n\n```\ncurl\
        \ -X GET https://console.jumpcloud.com/api/v2/systemgroups \\\n  -H 'Accept:\
        \ application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key:\
        \ {API_KEY}'\n```"
      operationId: "groups_system_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SystemGroup"
          examples:
            application/json:
            - id: "000000"
            - type: "system_group"
            - name: "group1"
              id: "000000"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_system_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "System Groups"
      summary: "Create a new System Group"
      description: "This endpoint allows you to create a new System Group.\n\n####\
        \ Sample Request\n\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/systemgroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n \"name\": \"{Group_Name}\"\
        \n}'\n\n```"
      operationId: "groups_system_post"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SystemGroupData"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/SystemGroup"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_system_post"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systemgroups/{id}:
    get:
      tags:
      - "System Groups"
      summary: "View an individual System Group details"
      description: "This endpoint returns the details of a System Group.\n\n#### Sample\
        \ Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "groups_system_get"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemGroup"
          examples:
            application/json:
              id: "000000"
              type: "system_group"
              name: "group1"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_system_get"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    put:
      tags:
      - "System Groups"
      summary: "Update a System Group"
      description: "This enpoint allows you to do a full update of the System Group.\n\
        \n#### Sample Request\n```\ncurl -X PUT https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n \"name\": \"Name_Update\"\n\
        }'\n```"
      operationId: "groups_system_put"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SystemGroupData"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemGroup"
          examples:
            application/json:
              id: "00000"
              type: "system_group"
              name: "group1"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_system_put"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      tags:
      - "System Groups"
      summary: "Delete a System Group"
      description: "This endpoint allows you to delete a System Group.\n\n#### Sample\
        \ Request\n```\ncurl -X DELETE https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "groups_system_delete"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "No Content"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_system_delete"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    patch:
      tags:
      - "System Groups"
      summary: "Partial update a System Group"
      description: "We have hidden PATCH on the systemgroups and usergroups for now;\
        \ we don't have that implemented correctly yet, people should use PUT until\
        \ we do a true PATCH operation.\n\n#### Sample Request\n```\nhttps://console.jumpcloud.com/api/v2/systemgroups/{id}\n\
        ```"
      operationId: "groups_system_patch"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SystemGroupData"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemGroup"
          examples:
            application/json:
              id: "00000"
              type: "system_group"
              name: "group1"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_system_patch"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systemgroups/{group_id}/members:
    get:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Members & Membership"
      summary: "List the members of a System Group"
      description: "This endpoint returns the system members of a System Group.\n\n\
        #### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemGroupMembersList"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupMembersList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Members & Membership"
      summary: "Manage the members of a System Group"
      description: "This endpoint allows you to manage the system members of a System\
        \ Group.\n\n#### Sample Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"system\",\n    \"id\": \"{System_ID\"\n}'\n```"
      operationId: "graph_systemGroupMembersPost"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SystemGroupMembersReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "Date"
        in: "header"
        description: "Current date header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Date"
      - name: "Authorization"
        in: "header"
        description: "Authorization header for the System Context API"
        required: false
        type: "string"
        x-exportParamName: "Authorization"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupMembersPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /systemgroups/{group_id}/memberof:
    get:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Members & Membership"
      summary: "List the System Group's parents"
      description: "This endpoint returns all System Groups a System Group is a member\
        \ of.\n\nThis endpoint is not yet public as we haven't completed the code\
        \ yet."
      operationId: "graph_systemGroupMemberOf"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupMemberOf"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systemgroups/{group_id}/membership:
    get:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Members & Membership"
      summary: "List the System Group's membership"
      description: "This endpoint returns all Systems that are a member of this System\
        \ Group.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID/membership\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemGroupMembership"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupMembership"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systemgroups/{group_id}/associations:
    get:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Associations"
      summary: "List the associations of a System Group"
      description: "This endpoint returns the _direct_ associations of a System Group.\n\
        \nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example System Groups and Users.\n\n\n#### Sample Request\n\
        ```\ncurl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations?targets=user\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_systemGroupAssociationsList"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "user"
          - "user_group"
        x-exportParamName: "Targets"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Associations"
      summary: "Manage the associations of a System Group"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ a System Group.\n\nA direct association can be a non-homogenous relationship\
        \ between 2 different objects. for example System Groups and Users.\n\n\n\
        #### Sample Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"user\",\n    \"id\": \"{UserID}\"\n}'\n\n```"
      operationId: "graph_systemGroupAssociationsPost"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SystemGroupGraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /systemgroups/{group_id}/users:
    get:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Associations"
      summary: "List the Users bound to a System Group"
      description: "This endpoint will return all Users bound to a System Group, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization.\n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this System Group to the corresponding User; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the User from this System Group.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/users\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_systemGroupTraverseUser"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupTraverseUser"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systemgroups/{group_id}/usergroups:
    get:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Associations"
      summary: "List the User Groups bound to a System Group"
      description: "This endpoint will return all User Groups bound to a System Group,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the type, id, attributes\
        \ and paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this System Group to the corresponding User Group; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the User Group from this System Group.\n\nSee `/members`\
        \ and `/associations` endpoints to manage those collections.\n\n#### Sample\
        \ Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/usergroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_systemGroupTraverseUserGroup"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupTraverseUserGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systemgroups/{group_id}/policies:
    get:
      tags:
      - "Graph"
      - "System Groups"
      - "System Group Associations"
      summary: "List the Policies bound to a System Group"
      description: "This endpoint will return all Policies bound to a System Group,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the type, id, attributes\
        \ and paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this System Group to the corresponding Policy; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the Policy from this System Group.\n\nSee `/members` and `/associations`\
        \ endpoints to manage those collections.\n\nThis endpoint is not public yet\
        \ as we haven't finished the code.\n\n##### Sample Request\n```\ncurl -X GET\
        \ https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/policies \\\n\
        \  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_systemGroupTraversePolicy"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupTraversePolicy"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /systemgroups/{group_id}/commands:
    get:
      tags:
      - "Graph"
      - "System Group Associations"
      summary: "List the Commands bound to a System Group"
      description: "This endpoint will return all Commands bound to a System Group,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the group's type, id,\
        \ attributes and paths.\n\nThe `attributes` object is a key/value hash of\
        \ compiled graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \ each path from this System Group to the corresponding Command; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the Command from this System Group.\n\nSee `/members` and\
        \ `/associations` endpoints to manage those collections.\n\n#### Sample Request\n\
        ```\ncurl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/commands\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_systemGroupTraverseCommand"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the System Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_systemGroupTraverseCommand"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/associations:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the associations of a User"
      description: "This endpoint returns the _direct_ associations of a User.\n\n\
        A direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example Users and Systems.\n\n\n#### Sample Request\n```\n\
        curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/associations?targets=system_group\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_userAssociationsList"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
        x-exportParamName: "Targets"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "Users"
      summary: "Manage the associations of a User"
      description: "This endpoint allows you to manage the _direct_ associations of\
        \ a User.\n\nA direct association can be a non-homogenous relationship between\
        \ 2 different objects. for example Users and Systems.\n\n\n#### Sample Request\n\
        ```\ncurl -X POST https://console.jumpcloud.com/api/v2/users/{UserID}/associations\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n   \"attributes\": {\n    \
        \  \"sudo\": {\n         \"enabled\": true,\n         \"withoutPassword\"\
        : false\n      }\n   }, \n   \"op\": \"add\",\n   \"type\": \"system_group\"\
        ,\n   \"id\": \"{GroupID}\"\n}'"
      operationId: "graph_userAssociationsPost"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserGraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /users/{user_id}/memberof:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the parent Groups of a User"
      description: "This endpoint returns all the User Groups a User is a member of.\n\
        \n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/memberof\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userMemberOf"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userMemberOf"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/applications:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the Applications bound to a User"
      description: "This endpoint will return all Applications bound to a User, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User to the corresponding Application; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the Application from this User.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/applications\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userTraverseApplication"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userTraverseApplication"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/directories:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the Directories bound to a User"
      description: "This endpoint will return all Directories bound to a User, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User to the corresponding Directory; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the Directory from this User.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/directories\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userTraverseDirectory"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userTraverseDirectory"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/gsuites:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the G Suite instances bound to a User"
      description: "This endpoint will return all G-Suite Instances bound to a User,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization. \n\nEach element will contain the type, id, attributes\
        \ and paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User to the corresponding G Suite instance; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the G Suite instance from this User.\n\nSee `/members` and `/associations`\
        \ endpoints to manage those collections.\n\n#### Sample Request\n```\ncurl\
        \ -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/gsuites \\\n\
        \  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userTraverseGSuite"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userTraverseGSuite"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/ldapservers:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the LDAP servers bound to a User"
      description: "This endpoint will return all LDAP Servers bound to a User, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User to the corresponding LDAP Server; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the LDAP Server from this User.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/ldapservers\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userTraverseLdapServer"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userTraverseLdapServer"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/office365s:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the Office 365 instances bound to a User"
      description: "This endpoint will return all Office 365 Instances bound to a\
        \ User, either directly or indirectly, essentially traversing the JumpCloud\
        \ Graph for your Organization. \n\nEach element will contain the type, id,\
        \ attributes and paths.\n\nThe `attributes` object is a key/value hash of\
        \ compiled graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \ each path from this User to the corresponding Office 365 instance; this\
        \ array represents all grouping and/or associations that would have to be\
        \ removed to deprovision the Office 365 instance from this User.\n\nSee `/members`\
        \ and `/associations` endpoints to manage those collections.\n\n#### Sample\
        \ Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/office365s\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userTraverseOffice365"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userTraverseOffice365"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/systems:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the Systems bound to a User"
      description: "This endpoint will return all Systems bound to a User, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User to the corresponding System; this array represents all\
        \ grouping and/or associations that would have to be removed to deprovision\
        \ the System from this User.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systems\\\
        \n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userTraverseSystem"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userTraverseSystem"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/radiusservers:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the RADIUS Servers bound to a User"
      description: "This endpoint will return all RADIUS Servers bound to a User,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.  \n\nEach element will contain the type, id, attributes\
        \ and paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User to the corresponding RADIUS Server; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the RADIUS Server from this User.\n\nSee `/members` and `/associations`\
        \ endpoints to manage those collections.\n\n#### Sample Request\n```\ncurl\
        \ -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/radiusservers\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userTraverseRadiusServer"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userTraverseRadiusServer"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /users/{user_id}/systemgroups:
    get:
      tags:
      - "Graph"
      - "Users"
      summary: "List the System Groups bound to a User"
      description: "This endpoint will return all System Groups bound to a User, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization. \n\nEach element will contain the type, id, attributes and\
        \ paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User to the corresponding System Group; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the System Group from this User.\n\nSee `/members` and `/associations` endpoints\
        \ to manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systemgroups\\\
        \n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userTraverseSystemGroup"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ObjectID of the User."
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userTraverseSystemGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups:
    get:
      tags:
      - "User Groups"
      summary: "List all User Groups"
      description: "This endpoint returns all User Groups.\n\nAvailable filter fields:\n\
        \  - `name`\n  - `disabled`\n  - `type`\n\n#### Sample Request\n```\ncurl\
        \ -X GET https://console.jumpcloud.com/api/v2/usergroups \\\n  -H 'Accept:\
        \ application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key:\
        \ {API_KEY}'\n```"
      operationId: "groups_user_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_user_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "User Groups"
      summary: "Create a new User Group"
      description: "This endpoint allows you to create a new User Group.\n\n#### Sample\
        \ Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/usergroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n \"name\": \"{Group_Name}\"\
        \n}'\n\n```"
      operationId: "groups_user_post"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserGroupPost"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/UserGroup"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_user_post"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{id}:
    get:
      tags:
      - "User Groups"
      summary: "View an indvidual User Group details"
      description: "This endpoint allows you to view the details of a User Group.\n\
        \n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "groups_user_get"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserGroup"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_user_get"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    put:
      tags:
      - "User Groups"
      summary: "Update a User Group"
      description: "This enpoint allows you to do a full update of the User Group.\n\
        \n#### Sample Request\n```\ncurl -X PUT https://console.jumpcloud.com/api/v2/usergroups/{Group_ID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY' \\\n  -d '{ \n \"name\": \"group_update\"\
        \n}'\n\n```"
      operationId: "groups_user_put"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserGroupPut"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserGroup"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_user_put"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      tags:
      - "User Groups"
      summary: "Delete a User Group"
      description: "This endpoint allows you to delete a User Group.\n\n#### Sample\
        \ Request\n```\ncurl -X DELETE https://console.jumpcloud.com/api/v2/usergroups/{GroupID}\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "groups_user_delete"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "No Content"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_user_delete"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    patch:
      tags:
      - "User Groups"
      summary: "Partial update a User Group"
      description: "We have hidden PATCH on the systemgroups and usergroups for now;\
        \ we don't have that implemented correctly yet, people should use PUT until\
        \ we do a true PATCH operation.\n\n#### Sample Request\n```\nhttps://console.jumpcloud.com/api/v2/usergroups/{id}\n\
        ```"
      operationId: "groups_user_patch"
      parameters:
      - name: "id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserGroupPost"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserGroup"
      security:
      - x-api-key: []
      x-stoplight:
        id: "groups_user_patch"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/members:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Members & Membership"
      summary: "List the members of a User Group"
      description: "This endpoint returns the user members of a User Group.\n\n####\
        \ Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupMembersList"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupMembersList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Members & Membership"
      summary: "Manage the members of a User Group"
      description: "This endpoint allows you to manage the user members of a User\
        \ Group.\n\n#### Sample Request\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"user\",\n    \"id\": \"{User_ID}\"\n}'\n```"
      operationId: "graph_userGroupMembersPost"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserGroupMembersReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupMembersPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /usergroups/{group_id}/memberof:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Members & Membership"
      summary: "List the User Group's parents"
      description: "This endpoint returns all User Groups a User Group is a member\
        \ of.\n\n#### Sample Request\n```\nhttps://console.jumpcloud.com/api/v2/usergroups/{group_id}/membersof\n\
        ```\n\nNot public yet, as the code is not finished,"
      operationId: "graph_userGroupMemberOf"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupMemberOf"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/membership:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Members & Membership"
      summary: "List the User Group's membership"
      description: "This endpoint returns all users members that are a member of this\
        \ User Group.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/membership\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupMembership"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupMembership"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/associations:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the associations of a User Group."
      description: "This endpoint returns the _direct_ associations of this User Group.\n\
        \nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example User Groups and Users.\n\n\n#### Sample Request\n```\n\
        curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations?targets=system\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupAssociationsList"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "targets"
        in: "query"
        description: ""
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active_directory"
          - "application"
          - "command"
          - "g_suite"
          - "ldap_server"
          - "office_365"
          - "policy"
          - "radius_server"
          - "system"
          - "system_group"
        x-exportParamName: "Targets"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphConnection"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupAssociationsList"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "Manage the associations of a User Group"
      description: "This endpoint manages the _direct_ associations of this User Group.\n\
        \nA direct association can be a non-homogenous relationship between 2 different\
        \ objects. for example User Groups and Users.\n\n\n#### Sample Request\n```\n\
        curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n    \"op\": \"add\",\n    \"\
        type\": \"system\",\n    \"id\": \"{SystemID}\"\n}'\n\n```"
      operationId: "graph_userGroupAssociationsPost"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserGroupGraphManagementReq"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: "OK"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupAssociationsPost"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    x-swagger-jumpcloud-auto-insert: true
  /usergroups/{group_id}/activedirectories:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the Active Directories bound to a User Group"
      description: "This endpoint will return all Active Directory Instances bound\
        \ to a User Group, either directly or indirectly, essentially traversing the\
        \ JumpCloud Graph for your Organization. \n\nThe `attributes` object is a\
        \ key/value hash of compiled graph attributes for all paths followed.\n\n\
        The `paths` array enumerates each path from this User Group to the corresponding\
        \ Active Directory; this array represents all grouping and/or associations\
        \ that would have to be removed to deprovision the Active Directory from this\
        \ User Group.\n\nSee `/members` and `/associations` endpoints to manage those\
        \ collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/activedirectories\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupTraverseActiveDirectory"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseActiveDirectory"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/systemgroups:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the System Groups bound to User Groups"
      description: "This endpoint will return all System Groups bound to a User Group,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.  \n\nEach element will contain the type, id, attributes\
        \ and paths.\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User Group to the corresponding System Group; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the System Group from this User Group.\n\nSee `/members`\
        \ and `/associations` endpoints to manage those collections.\n\n#### Sample\
        \ Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systemgroups\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupTraverseSystemGroup"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseSystemGroup"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/systems:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the Systems bound to a User Group"
      description: "This endpoint will return all Systems bound to a User Group, either\
        \ directly or indirectly, essentially traversing the JumpCloud Graph for your\
        \ Organization.  \n\nEach element will contain the type, id, attributes and\
        \ paths\n\nThe `attributes` object is a key/value hash of compiled graph attributes\
        \ for all paths followed.\n\nThe `paths` array enumerates each path from this\
        \ User Group to the corresponding System; this array represents all grouping\
        \ and/or associations that would have to be removed to deprovision the System\
        \ from this User Group.\n\nSee `/members` and `/associations` endpoints to\
        \ manage those collections.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systems\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupTraverseSystem"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseSystem"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/radiusservers:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the RADIUS Servers bound to a User Group"
      description: "This endpoint will return all RADIUS servers bound to a User Group,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.  \n\nEach element will contain the type, id, attributes\
        \ and paths\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User Group to the corresponding RADIUS Server; this array\
        \ represents all grouping and/or associations that would have to be removed\
        \ to deprovision the RADIUS Server from this User Group.\n\nSee `/members`\
        \ and `/associations` endpoints to manage those collections.\n\n#### Sample\
        \ Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/radiusservers\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_userGroupTraverseRadiusServer"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseRadiusServer"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/office365s:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the Office 365 instances bound to a User Group"
      description: "This endpoint will return all Office 365 instances bound to a\
        \ User Group, either directly or indirectly, essentially traversing the JumpCloud\
        \ Graph for your Organization.\n\nEach element will contain the type, id,\
        \ attributes and paths\n\nThe `attributes` object is a key/value hash of compiled\
        \ graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \ each path from this User Group to the corresponding Office 365 instance;\
        \ this array represents all grouping and/or associations that would have to\
        \ be removed to deprovision the Office 365 instance from this User Group.\n\
        \nSee `/members` and `/associations` endpoints to manage those collections.\n\
        \n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/office365s\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupTraverseOffice365"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseOffice365"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/ldapservers:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the LDAP Servers bound to a User Group"
      description: "This endpoint will return all LDAP Servers bound to a User Group,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the type, id, attributes\
        \ and paths\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User Group to the corresponding LDAP Server; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the LDAP Server from this User Group.\n\nSee `/members` and `/associations`\
        \ endpoints to manage those collections.\n\n#### Sample Request\n```\ncurl\
        \ -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/ldapservers\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupTraverseLdapServer"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseLdapServer"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/gsuites:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the G Suite instances bound to a User Group"
      description: "This endpoint will return all Gsuite Instances bound to a User\
        \ Group, either directly or indirectly, essentially traversing the JumpCloud\
        \ Graph for your Organization.\n\nEach element will contain the type, id,\
        \ attributes and paths\n\nThe `attributes` object is a key/value hash of compiled\
        \ graph attributes for all paths followed.\n\nThe `paths` array enumerates\
        \ each path from this User Group to the corresponding G Suite instance; this\
        \ array represents all grouping and/or associations that would have to be\
        \ removed to deprovision the G Suite instance from this User Group.\n\nSee\
        \ `/members` and `/associations` endpoints to manage those collections.\n\n\
        #### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID/gsuites\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_userGroupTraverseGSuite"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseGSuite"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/directories:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the Directories bound to a User Group"
      description: "This endpoint will return all Directories bound to a User Group,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the type, id, attributes\
        \ and paths\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User Group to the corresponding Directory; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the Directories from this User Group.\n\nSee `/members` and `/associations`\
        \ endpoints to manage those collections.\n\n#### Sample Request\n```\ncurl\
        \ -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/directories\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n```"
      operationId: "graph_userGroupTraverseDirectory"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseDirectory"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /usergroups/{group_id}/applications:
    get:
      tags:
      - "Graph"
      - "User Groups"
      - "User Group Associations"
      summary: "List the Applications bound to a User Group"
      description: "This endpoint will return all Applications bound to a User Group,\
        \ either directly or indirectly, essentially traversing the JumpCloud Graph\
        \ for your Organization.\n\nEach element will contain the type, id, attributes\
        \ and paths\n\nThe `attributes` object is a key/value hash of compiled graph\
        \ attributes for all paths followed.\n\nThe `paths` array enumerates each\
        \ path from this User Group to the corresponding Application; this array represents\
        \ all grouping and/or associations that would have to be removed to deprovision\
        \ the Application from this User Group.\n\nSee `/members` and `/associations`\
        \ endpoints to manage those collections.\n\n#### Sample Request\n```\ncurl\
        \ -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/applications\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "graph_userGroupTraverseApplication"
      parameters:
      - name: "group_id"
        in: "path"
        description: "ObjectID of the User Group."
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GraphObjectWithPaths"
      security:
      - x-api-key: []
      x-stoplight:
        id: "graph_userGroupTraverseApplication"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /workdays/{id}:
    get:
      tags:
      - "Workday Import"
      summary: "Get Workday"
      description: "This endpoint will return  all the available information about\
        \ an instance of Workday.\n\n#### Sample Request\n\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/workdays/\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n  ```"
      operationId: "workdays_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/workday-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_get"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    put:
      tags:
      - "Workday Import"
      summary: "Update Workday"
      description: "This endpoint allows you to update the name and Custom Report\
        \ URL for a Workday Instance.\n\nCurrently, the name can not be changed from\
        \ the default of `Workday Import`.\n\n##### Sample Request\n```\ncurl -X PUT\
        \ https://console.jumpcloud.com/api/v2/workdays/{WorkdayID} \\\n  -H 'Accept:\
        \ application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key:\
        \ {API_KEY}' \\\n  -d '{\n\t\"reportUrl\":\"{Report_URL}\",\n\t\"name\":\"\
        {Name}\"\n}\t'\n```"
      operationId: "workdays_put"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/workday-fields"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/workday-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_put"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      tags:
      - "Workday Import"
      summary: "Delete Workday"
      description: "This endpoint allows you to delete an instance of Workday. \n\n\
        **This functionality is currently not enable for users.**"
      operationId: "workdays_delete"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: ""
          schema:
            type: "object"
            properties: {}
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_delete"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /workdays:
    get:
      tags:
      - "Workday Import"
      summary: "List Workdays"
      description: "This endpoint will return  all the available information about\
        \ all your instances of Workday.\n\n##### Sample Request\n```\ncurl -X GET\
        \ https://console.jumpcloud.com/api/v2/workdays/ \\\n  -H 'Accept: application/json'\
        \ \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: {API_KEY}'\n\
        \  ```"
      operationId: "workdays_list"
      parameters:
      - name: "fields"
        in: "query"
        description: "The comma separated fields included in the returned records.\n\
          If omitted the default list of fields will be returned.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Fields"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      - name: "filter"
        in: "query"
        description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
          \ in"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Filter"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/workday-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_list"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      tags:
      - "Workday Import"
      summary: "Create new Workday"
      description: "This endpoint allows you to create a new workday instance.\n\n\
        You must supply a username and password for `Basic Authentication` that is\
        \ the same as your WorkDay Integrator System User.  Failure to provide these\
        \ credentials  will result in the request being rejected.\n\nCurrently `O-Auth`\
        \ isn't a supported authentication protocol for WorkDay, but will be in the\
        \ future.\n\nCurrently, only one instance is allowed and it must be `Workday\
        \ Import`.\n\n#### Sample Request \n```\ncurl -X POST https://console.jumpcloud.com/api/v2/workdays/\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n  \"name\": \"Workday2\", \n\
        \  \"reportUrl\":\"https://workday.com/ccx/service/customreport2/gms/user/reportname?format=json\"\
        , \n  \"auth\": {\n    \"basic\": {\n      \"username\": \"someDeveloper\"\
        , \n      \"password\": \"notTheRealPassword\"\n    }\n  }\n}'\n```"
      operationId: "workdays_post"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/workday-input"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
        201:
          description: ""
          schema:
            $ref: "#/definitions/workday-output"
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_post"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /workdays/{workday_id}/workers:
    get:
      tags:
      - "Workday Import"
      summary: "List Workday Workers"
      description: "This endpoint will return all of the data in your WorkDay Custom\
        \ Report that has been associated with your WorkDay Instance in JumpCloud.\n\
        \n##### Sample Request \n\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/workers\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n\n\n```"
      operationId: "workdays_workers"
      parameters:
      - name: "workday_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "WorkdayId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "sort"
        in: "query"
        description: "The comma separated fields used to sort the collection.\nDefault\
          \ sort is ascending, prefix with `-` to sort descending.\n"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Sort"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/workday-worker"
          examples:
            application/json:
            - lastName: "sint dolore Excepteur ad"
            - firstName: "et ad"
              attributes: {}
              email: "nostrud tempor anim ips"
              username: "Excepteur culpa nulla aliqua"
            - attributes: {}
              email: "veniam ullamco"
            - {}
            - lastName: "do"
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_workers"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /workdays/{workday_id}/auth:
    post:
      tags:
      - "Workday Import"
      summary: "Authorize Workday"
      description: "This endpoint adds an authorization method to a workday instance.\n\
        \nYou must supply a username and password for `Basic Authentication` that\
        \ is the same as your WorkDay Integrator System User.  Failure to provide\
        \ these credentials  will result in the request being rejected.\n\nCurrently\
        \ `O-Auth` isn't a supported authentication protocol for WorkDay, but will\
        \ be in the future.\n\n#### Sample Request\n\n```\ncurl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '{\n\t\"auth\":{\n\t  \"basic\"\
        : {\n\t\t\"username\": \"someDeveloper\",\t  \n\t\t\"password\": \"notTheRealPassword\"\
        \n\n\t  }\n\t}\n}'\n\n```"
      operationId: "workdays_authorize"
      parameters:
      - name: "workday_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "WorkdayId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/auth-input-object"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: ""
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_authorize"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      tags:
      - "Workday Import"
      summary: "Deauthorize Workday"
      description: "Removes any and all authorization methods from the workday instance\n\
        \n##### Sample Request\n```\ncurl -X DELETE https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "workdays_deauthorize"
      parameters:
      - name: "workday_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "WorkdayId"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        204:
          description: ""
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_deauthorize"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /workdays/{id}/import/{job_id}/results:
    get:
      tags:
      - "Workday Import"
      summary: "List Import Results"
      description: "This endpoint provides a list of job results from the workday\
        \ import and will contain all imported data from Workday.\n\n#### Sample Request\n\
        ```\ncurl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import/{ImportJobID}/results\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}'\n```"
      operationId: "workdays_importresults"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "job_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "JobId"
      - name: "limit"
        in: "query"
        description: "The number of records to return at once. Limited to 100."
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
      - name: "skip"
        in: "query"
        description: "The offset into the records to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Skip"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/job-workresult"
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_importresults"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /workdays/{workday_id}/import:
    post:
      tags:
      - "Workday Import"
      summary: "Workday Import"
      description: "The endpoint allows you to create a Workday Import request.\n\n\
        #### Sample Request \n```\ncurl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import\
        \ \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -d '[\n\t{\n\t\t\"email\":\"{email}\"\
        ,\n\t\t\"firstname\":\"{firstname}\",\n\t\t\"lastname\":\"{firstname}\",\n\
        \t\t\"username\":\"{username}\",\n\t\t\"attributes\":[\n\t\t\t{\"name\":\"\
        EmployeeID\",\"value\":\"0000\"},\n\t\t\t{\"name\":\"WorkdayID\",\"value\"\
        :\"name.name\"}\n\t\t\t]\n\t\t\n\t}\n]\n```"
      operationId: "workdays_import"
      parameters:
      - name: "workday_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "WorkdayId"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/bulk-user-create"
        x-exportParamName: "Body"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        201:
          description: ""
          schema:
            $ref: "#/definitions/job-id"
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_import"
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /workdays/settings:
    get:
      tags:
      - "Workday Import"
      summary: "Get Workday Settings (incomplete)"
      description: "This endpoint allows you to obtain all settings needed for creating\
        \ a workday instance, specifically the URL to initiate Basic Authentication\
        \ with WorkDay. \n\n**This functionality is currently not enable for users.**"
      operationId: "workdays_settings"
      parameters:
      - name: "state"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "State"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
      - name: "Accept"
        in: "header"
        required: true
        type: "string"
        default: "application/json"
        x-exportParamName: "Accept"
      responses:
        200:
          description: ""
      security:
      - x-api-key: []
      x-stoplight:
        id: "workdays_settings"
        beforeScript: null
        afterScript: null
        public: false
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
securityDefinitions:
  x-api-key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
definitions:
  GraphConnection:
    type: "object"
    required:
    - "to"
    properties:
      from:
        $ref: "#/definitions/GraphObject"
      to:
        $ref: "#/definitions/GraphObject"
    title: "GraphConnection"
    description: "Represents an edge between two graph objects. From can be omitted\
      \ if it is clear from context."
    example:
      from:
        id: "id"
        type: "type"
      to:
        id: "id"
        type: "type"
    x-stoplight:
      id: "GraphConnection"
      name: "GraphConnection"
      public: true
  SystemGroupMembersReq:
    type: "object"
    required:
    - "id"
    - "op"
    - "type"
    properties:
      op:
        type: "string"
        description: "How to modify the membership connection."
        enum:
        - "add"
        - "remove"
      type:
        type: "string"
        description: "The member type."
        enum:
        - "system"
      id:
        type: "string"
        description: "The ObjectID of member being added or removed."
    title: "SystemGroupMembersReq"
    example:
      op: "add"
      id: "id"
      type: "system"
    x-stoplight:
      id: "SystemGroupMembersReq"
      name: "SystemGroupMembersReq"
      public: true
  Group:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely identifying a Group."
      type:
        $ref: "#/definitions/GroupType"
      name:
        type: "string"
        description: "Display name of a Group."
    title: "Group"
    example:
      name: "name"
      id: "id"
      type: {}
    x-stoplight:
      id: "Group"
      name: "Group"
      public: true
  SystemGroupData:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Display name of a System Group."
    title: "SystemGroupData"
    example:
      name: "name"
    x-stoplight:
      id: "SystemGroupData"
      name: "SystemGroupData"
      public: true
  UserGroupMembersReq:
    type: "object"
    required:
    - "id"
    - "op"
    - "type"
    properties:
      op:
        type: "string"
        description: "How to modify the membership connection."
        enum:
        - "add"
        - "remove"
      type:
        type: "string"
        description: "The member type."
        enum:
        - "user"
      id:
        type: "string"
        description: "The ObjectID of member being added or removed."
    title: "UserGroupMembersReq"
    example:
      op: "add"
      id: "id"
      type: "user"
    x-stoplight:
      id: "UserGroupMembersReq"
      name: "UserGroupMembersReq"
      public: true
  Directory:
    type: "object"
    required:
    - "id"
    - "name"
    - "type"
    properties:
      type:
        type: "string"
        description: "The type of directory."
        enum:
        - "g_suite"
        - "ldap_server"
        - "office_365"
        - "workday"
      id:
        type: "string"
        description: "The ObjectID of the directory."
      name:
        type: "string"
        description: "The name of the directory."
    title: "Directory"
    example:
      name: "name"
      id: "id"
      type: "g_suite"
    x-stoplight:
      id: "Directory"
      name: "Directory"
      public: true
  UserGroup:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely identifying a User Group."
      type:
        type: "string"
        description: "The type of the group."
        enum:
        - "user_group"
      name:
        type: "string"
        description: "Display name of a User Group."
    title: "UserGroup"
    example:
      name: "name"
      id: "id"
      type: "user_group"
    x-stoplight:
      id: "UserGroup"
      name: "UserGroup"
      public: true
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
    title: "Error"
    x-stoplight:
      id: "Error"
      name: "Error"
      public: true
  GraphObject:
    type: "object"
    required:
    - "id"
    - "type"
    properties:
      type:
        type: "string"
        description: "The type of graph object."
      id:
        type: "string"
        description: "The ObjectID of the graph object."
    title: "GraphObject"
    example:
      id: "id"
      type: "type"
    x-stoplight:
      id: "GraphObject"
      name: "GraphObject"
      public: true
  SystemGroup:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely identifying a System Group."
      type:
        type: "string"
        description: "The type of the group; always 'system' for a System Group."
        enum:
        - "system_group"
      name:
        type: "string"
        description: "Display name of a System Group."
    title: "SystemGroup"
    example:
      name: "name"
      id: "id"
      type: "system_group"
    x-stoplight:
      id: "SystemGroup"
      name: "SystemGroup"
      public: true
  UserGroupPost:
    type: "object"
    required:
    - "name"
    properties:
      attributes:
        $ref: "#/definitions/UserGroupPost_attributes"
      name:
        type: "string"
        description: "Display name of a User Group."
    title: "UserGroupPost"
    example:
      name: "name"
      attributes:
        sambaEnabled: true
        posixGroups:
        - name: "name"
          id: 0
        - name: "name"
          id: 0
    x-stoplight:
      id: "UserGroupPost"
      name: "UserGroupPost"
      public: true
  GraphObjectWithPaths:
    type: "object"
    required:
    - "id"
    - "paths"
    - "type"
    properties:
      type:
        $ref: "#/definitions/GraphType"
      id:
        type: "string"
        description: "Object ID of this graph object."
      paths:
        type: "array"
        description: "A path through the graph between two graph objects."
        items:
          type: "array"
          items:
            $ref: "#/definitions/GraphConnection"
    title: "GraphObjectWithPaths"
    example:
      paths:
      - - from:
            id: "id"
            type: "type"
          to:
            id: "id"
            type: "type"
        - from:
            id: "id"
            type: "type"
          to:
            id: "id"
            type: "type"
      - - from:
            id: "id"
            type: "type"
          to:
            id: "id"
            type: "type"
        - from:
            id: "id"
            type: "type"
          to:
            id: "id"
            type: "type"
      id: "id"
      type: {}
    x-stoplight:
      id: "GraphObjectWithPaths"
      name: "GraphObjectWithPaths"
      public: true
  GroupType:
    type: "string"
    title: "GroupType"
    description: "The group type."
    enum:
    - "system_group"
    - "user_group"
    x-stoplight:
      id: "GroupType"
      name: "GroupType"
      public: true
  PolicyTemplate:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely identifying a Policy Template."
      name:
        type: "string"
        description: "The unique name for the Policy Template."
      description:
        type: "string"
        description: "The default description for the Policy."
      displayName:
        type: "string"
        description: "The default display name for the Policy."
      osMetaFamily:
        type: "string"
        enum:
        - "linux"
        - "darwin"
        - "windows"
      activation:
        type: "string"
        description: "Requirements before the policy can be activated."
      behavior:
        type: "string"
        description: "Specifics about the behavior of the policy."
    title: "PolicyTemplate"
    description: "The shallow information about a Policy Template."
    example:
      displayName: "displayName"
      osMetaFamily: "linux"
      name: "name"
      description: "description"
      id: "id"
      activation: "activation"
      behavior: "behavior"
    x-stoplight:
      id: "PolicyTemplate"
      name: "PolicyTemplate"
      public: true
  GraphType:
    type: "string"
    title: "GraphType"
    description: "The graph type."
    enum:
    - "active_directory"
    - "application"
    - "command"
    - "g_suite"
    - "ldap_server"
    - "office_365"
    - "policy"
    - "radius_server"
    - "system"
    - "system_group"
    - "user"
    - "user_group"
    x-stoplight:
      id: "GraphType"
      name: "GraphType"
      public: true
  Policy:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely indetifying a Policy."
      template:
        $ref: "#/definitions/PolicyTemplate"
      name:
        type: "string"
        description: "The description for this specific Policy."
    title: "Policy"
    description: "An instance of a policty template."
    example:
      template:
        displayName: "displayName"
        osMetaFamily: "linux"
        name: "name"
        description: "description"
        id: "id"
        activation: "activation"
        behavior: "behavior"
      name: "name"
      id: "id"
    x-stoplight:
      id: "Policy"
      name: "Policy"
      public: true
  GraphManagementReq:
    type: "object"
    required:
    - "id"
    - "op"
    - "type"
    properties:
      op:
        type: "string"
        description: "How to modify the graph connection."
        enum:
        - "add"
        - "remove"
        - "update"
      type:
        $ref: "#/definitions/GraphType"
      id:
        type: "string"
        description: "The ObjectID of graph object being added or removed as an association."
    title: "GraphManagementReq"
    example:
      op: "add"
      id: "id"
      type: {}
    x-stoplight:
      id: "GraphManagementReq"
      name: "GraphManagementReq"
      public: true
  samba-domain-input:
    type: "object"
    required:
    - "name"
    - "sid"
    properties:
      name:
        type: "string"
        description: "Name of this domain's WorkGroup"
      sid:
        type: "string"
        description: "Security identifier of this domain"
    title: "Samba Domain Input"
    x-stoplight:
      id: "samba-domain-input"
      name: "Samba Domain Input"
      public: true
  samba-domain-output:
    title: "Samba Domain Output"
    allOf:
    - type: "object"
      required:
      - "id"
      properties:
        id:
          type: "string"
          description: "Unique identifier of this domain"
    - $ref: "#/definitions/samba-domain-input"
    x-stoplight:
      id: "samba-domain-output"
      name: "Samba Domain Output"
      public: true
  PolicyTemplateWithDetails:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely indetifying a Policy Template."
      name:
        type: "string"
        description: "The unique name for the Policy Template."
      description:
        type: "string"
        description: "The default description for the Policy."
      displayName:
        type: "string"
        description: "The default display name for the Policy."
      osMetaFamily:
        type: "string"
        enum:
        - "linux"
        - "darwin"
        - "windows"
      configFields:
        type: "array"
        description: "An unordered list of all the fields that can be configured for\
          \ this Policy Template."
        items:
          $ref: "#/definitions/PolicyTemplateConfigField"
      activation:
        type: "string"
        description: "Requirements before the policy can be activated."
      behavior:
        type: "string"
        description: "Specifics about the behavior of the policy."
    title: "PolicyTemplateWithDetails"
    description: "The shallow information about a Policy Template."
    example:
      displayName: "displayName"
      osMetaFamily: "linux"
      name: "name"
      description: "description"
      id: "id"
      activation: "activation"
      behavior: "behavior"
      configFields:
      - displayType: "checkbox"
        name: "name"
        tooltip:
          template: "template"
          variables:
            icon: "icon"
            message: "message"
        readOnly: true
        id: "id"
        label: "label"
        position: 0.80082819046101150206595775671303272247314453125
        required: true
      - displayType: "checkbox"
        name: "name"
        tooltip:
          template: "template"
          variables:
            icon: "icon"
            message: "message"
        readOnly: true
        id: "id"
        label: "label"
        position: 0.80082819046101150206595775671303272247314453125
        required: true
    x-stoplight:
      id: "PolicyTemplateWithDetails"
      name: "PolicyTemplateWithDetails"
      public: true
  PolicyTemplateConfigField:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely identifying a Policy Template Configuration\
          \ Field"
      displayType:
        type: "string"
        description: "The default rendering for this field."
        enum:
        - "checkbox"
        - "date"
        - "email"
        - "number"
        - "select"
        - "text"
        - "textarea"
      label:
        type: "string"
        description: "The default label for this field."
      name:
        type: "string"
        description: "A unique name identifying this config field."
      position:
        type: "number"
        description: "The default position to render this field."
      readOnly:
        type: "boolean"
        description: "If an admin is allowed to modify this field."
      required:
        type: "boolean"
        description: "If this field is required for this field."
      tooltip:
        $ref: "#/definitions/PolicyTemplateConfigField_tooltip"
    title: "PolicyTemplateConfigField"
    example:
      displayType: "checkbox"
      name: "name"
      tooltip:
        template: "template"
        variables:
          icon: "icon"
          message: "message"
      readOnly: true
      id: "id"
      label: "label"
      position: 0.80082819046101150206595775671303272247314453125
      required: true
    x-stoplight:
      id: "PolicyTemplateConfigField"
      name: "PolicyTemplateConfigField"
      public: true
  PolicyWithDetails:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely indetifying a Policy."
      template:
        $ref: "#/definitions/PolicyTemplate"
      configFields:
        type: "array"
        items:
          $ref: "#/definitions/PolicyTemplateConfigField"
      name:
        type: "string"
        description: "The description for this specific Policy."
      values:
        type: "array"
        items:
          $ref: "#/definitions/PolicyValue"
    title: "PolicyWithDetails"
    description: "An instance of a policty template."
    example:
      template:
        displayName: "displayName"
        osMetaFamily: "linux"
        name: "name"
        description: "description"
        id: "id"
        activation: "activation"
        behavior: "behavior"
      values:
      - configFieldID: "configFieldID"
      - configFieldID: "configFieldID"
      name: "name"
      id: "id"
      configFields:
      - displayType: "checkbox"
        name: "name"
        tooltip:
          template: "template"
          variables:
            icon: "icon"
            message: "message"
        readOnly: true
        id: "id"
        label: "label"
        position: 0.80082819046101150206595775671303272247314453125
        required: true
      - displayType: "checkbox"
        name: "name"
        tooltip:
          template: "template"
          variables:
            icon: "icon"
            message: "message"
        readOnly: true
        id: "id"
        label: "label"
        position: 0.80082819046101150206595775671303272247314453125
        required: true
    x-stoplight:
      id: "PolicyWithDetails"
      name: "PolicyWithDetails"
      public: true
  PolicyValue:
    type: "object"
    properties:
      configFieldID:
        type: "string"
        description: "The ObjectId of the corresponding Policy Template configuration\
          \ field."
    title: "PolicyValue"
    example:
      configFieldID: "configFieldID"
    x-stoplight:
      id: "PolicyValue"
      name: "PolicyValue"
      public: true
  PolicyResult:
    type: "object"
    properties:
      policyID:
        type: "string"
        description: "ObjectId uniquely identifying the parent Policy."
      systemID:
        type: "string"
        description: "ObjectId uniquely identifying the parent System."
      id:
        type: "string"
        description: "ObjectId uniquely identifying a Policy Result."
      startedAt:
        type: "string"
        format: "date-time"
        description: "The start of the policy application."
      endedAt:
        type: "string"
        format: "date-time"
        description: "The end of the policy application."
      success:
        type: "boolean"
        description: "True if the policy was successfully applied; false otherwise."
      exitStatus:
        type: "integer"
        description: "The 32-bit unsigned exit status from the applying the policy."
      stdErr:
        type: "string"
        description: "The STDERR output from applying the policy."
      stdOut:
        type: "string"
        description: "The STDOUT output from applying the policy."
    title: "PolicyResult"
    example:
      systemID: "systemID"
      policyID: "policyID"
      stdOut: "stdOut"
      endedAt: "2000-01-23T04:56:07.000+00:00"
      success: true
      startedAt: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      stdErr: "stdErr"
      exitStatus: 0
    x-stoplight:
      id: "PolicyResult"
      name: "PolicyResult"
      public: true
  PolicyRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "The description for this specific Policy."
      values:
        type: "array"
        items:
          $ref: "#/definitions/PolicyValue"
      template:
        $ref: "#/definitions/PolicyRequest_template"
    title: "PolicyRequest"
    description: "An instance of a policty template."
    example:
      template:
        id: "id"
      values:
      - configFieldID: "configFieldID"
      - configFieldID: "configFieldID"
      name: "name"
    x-stoplight:
      id: "PolicyRequest"
      name: "PolicyRequest"
      public: true
  ldap-server-input:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of this LDAP server"
    title: "LDAP Server Input"
    x-stoplight:
      id: "ldap-server-input"
      name: "LDAP Server Input"
      public: true
  ldap-server-output:
    title: "LDAP Server Output"
    allOf:
    - type: "object"
      required:
      - "id"
      properties:
        id:
          type: "string"
          description: "Unique identifier of this LDAP server"
    - $ref: "#/definitions/ldap-server-input"
    x-stoplight:
      id: "ldap-server-output"
      name: "LDAP Server Output"
      public: true
  active-directory-input:
    type: "object"
    properties:
      domain:
        type: "string"
        description: "Domain name for this Active Directory instance."
    title: "Active Directory Input"
    x-stoplight:
      id: "active-directory-input"
      name: "Active Directory Input"
      public: true
  active-directory-output:
    title: "Active Directory Output"
    allOf:
    - type: "object"
      required:
      - "id"
      properties:
        id:
          type: "string"
          description: "ObjectID of this Active Directory instance."
    - $ref: "#/definitions/active-directory-input"
    x-stoplight:
      id: "active-directory-output"
      name: "Active Directory Output"
      public: true
  UserGroupGraphManagementReq:
    type: "object"
    required:
    - "id"
    - "op"
    - "type"
    properties:
      op:
        type: "string"
        description: "How to modify the graph connection."
        enum:
        - "add"
        - "remove"
        - "update"
      type:
        type: "string"
        description: "The graph type"
        enum:
        - "active_directory"
        - "application"
        - "command"
        - "g_suite"
        - "ldap_server"
        - "office_365"
        - "policy"
        - "radius_server"
        - "system"
        - "system_group"
      id:
        type: "string"
        description: "The ObjectID of graph object being added or removed as an association."
    title: "UserGroupGraphManagementReq"
    example:
      op: "add"
      id: "id"
      type: "active_directory"
    x-stoplight:
      id: "UserGroupGraphManagementReq"
      name: "UserGroupGraphManagementReq"
      public: true
  SystemGroupGraphManagementReq:
    type: "object"
    required:
    - "id"
    - "op"
    - "type"
    properties:
      op:
        type: "string"
        description: "How to modify the graph connection."
        enum:
        - "add"
        - "remove"
        - "update"
      type:
        type: "string"
        enum:
        - "active_directory"
        - "application"
        - "command"
        - "g_suite"
        - "ldap_server"
        - "office_365"
        - "policy"
        - "radius_server"
        - "user"
        - "user_group"
      id:
        type: "string"
        description: "The ObjectID of graph object being added or removed as an association."
    title: "SystemGroupGraphManagementReq"
    example:
      op: "add"
      id: "id"
      type: "active_directory"
    x-stoplight:
      id: "SystemGroupGraphManagementReq"
      name: "SystemGroupGraphManagementReq"
      public: true
  oauth-code-input:
    type: "object"
    properties:
      code:
        type: "string"
    title: "OAuth Code Input"
    x-stoplight:
      id: "oauth-code-input"
      name: "OAuth Code Input"
      public: true
  workday-worker:
    type: "object"
    properties:
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      attributes:
        type: "object"
        properties: {}
    title: "Workday Worker"
    x-stoplight:
      id: "workday-worker"
      name: "Workday Worker"
      public: true
  workday-request:
    type: "object"
    properties:
      objectId:
        type: "string"
      name:
        type: "string"
    title: "Workday Request"
    x-stoplight:
      id: "workday-request"
      name: "Workday Request"
      public: true
  workday-input:
    type: "object"
    properties:
      reportUrl:
        type: "string"
      name:
        type: "string"
      auth:
        $ref: "#/definitions/auth-input"
    title: "Workday Input"
    example:
      reportUrl: "eu est sint Lorem"
      name: "in voluptate ullamco"
      auth:
        auth:
          credentials:
            username: "mollit ex"
            password: "cillum occaecat id eiusmod ullamco"
          ?
          : domain: "veniam"
    x-stoplight:
      id: "workday-input"
      name: "Workday Input"
      public: true
  auth-info:
    type: "object"
    properties:
      expiry:
        type: "string"
      isValid:
        type: "boolean"
      message:
        type: "string"
    title: "Auth Info"
    example:
      isValid: true
      expiry: "expiry"
      message: "message"
    x-stoplight:
      id: "auth-info"
      name: "Auth Info"
      public: true
  workday-output:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      reportUrl:
        type: "string"
      lastImport:
        type: "string"
      auth:
        $ref: "#/definitions/workdayoutput_auth"
    title: "Workday Output"
    example:
      lastImport: "lastImport"
      auth:
        basic:
          isValid: true
          expiry: "expiry"
          message: "message"
        oauth:
          isValid: true
          expiry: "expiry"
          message: "message"
      name: "name"
      id: "id"
      reportUrl: "reportUrl"
    x-stoplight:
      id: "workday-output"
      name: "Workday Output"
      public: true
  auth-input:
    type: "object"
    properties:
      oauth:
        $ref: "#/definitions/authinput_oauth"
      basic:
        $ref: "#/definitions/authinput_basic"
    title: "Auth Input"
    x-stoplight:
      id: "auth-input"
      name: "Auth Input"
      public: true
  SystemGraphManagementReq:
    type: "object"
    required:
    - "id"
    - "op"
    - "type"
    properties:
      attributes:
        $ref: "#/definitions/SystemGraphManagementReq_attributes"
      op:
        type: "string"
        description: "How to modify the graph connection."
        enum:
        - "add"
        - "remove"
        - "update"
      type:
        type: "string"
        enum:
        - "active_directory"
        - "application"
        - "command"
        - "g_suite"
        - "ldap_server"
        - "office_365"
        - "policy"
        - "radius_server"
        - "user"
        - "user_group"
      id:
        type: "string"
        description: "The ObjectID of graph object being added or removed as an association."
    title: "SystemGraphManagementReq"
    example:
      op: "add"
      attributes:
        sudo:
          withoutPassword: true
          enabled: true
      id: "id"
      type: "active_directory"
    x-stoplight:
      id: "SystemGraphManagementReq"
      name: "SystemGraphManagementReq"
      public: true
  UserGraphManagementReq:
    type: "object"
    required:
    - "id"
    - "op"
    - "type"
    properties:
      attributes:
        $ref: "#/definitions/SystemGraphManagementReq_attributes"
      op:
        type: "string"
        description: "How to modify the graph connection."
        enum:
        - "add"
        - "remove"
        - "update"
      type:
        type: "string"
        enum:
        - "active_directory"
        - "application"
        - "command"
        - "g_suite"
        - "ldap_server"
        - "office_365"
        - "policy"
        - "radius_server"
        - "system"
        - "system_group"
      id:
        type: "string"
        description: "The ObjectID of graph object being added or removed as an association."
    title: "UserGraphManagementReq"
    example:
      op: "add"
      attributes:
        sudo:
          withoutPassword: true
          enabled: true
      id: "id"
      type: "active_directory"
    x-stoplight:
      id: "UserGraphManagementReq"
      name: "UserGraphManagementReq"
      public: true
  UserGroupPut:
    type: "object"
    required:
    - "name"
    properties:
      attributes:
        $ref: "#/definitions/UserGroupPut_attributes"
      name:
        type: "string"
        description: "Display name of a User Group."
    title: "UserGroupPut"
    example:
      name: "name"
      attributes:
        sambaEnabled: true
    x-stoplight:
      id: "UserGroupPut"
      name: "UserGroupPut"
      public: true
  job-workresult:
    type: "object"
    properties:
      meta:
        type: "object"
        properties: {}
    title: "Job WorkResult"
    example:
      meta: "{}"
    x-stoplight:
      id: "job-workresult"
      name: "Job WorkResult"
      public: true
  auth-input-object:
    type: "object"
    properties:
      auth:
        $ref: "#/definitions/auth-input"
    title: "Auth Input Object"
    x-stoplight:
      id: "auth-input-object"
      name: "Auth Input Object"
      public: true
  job-id:
    type: "object"
    properties:
      jobId:
        type: "string"
    title: "Job ID"
    example:
      jobId: "jobId"
    x-stoplight:
      id: "job-id"
      name: "Job ID"
      public: true
  job-details:
    type: "object"
    properties:
      id:
        type: "string"
      adminId:
        type: "string"
      workUnitsCount:
        type: "integer"
      name:
        type: "string"
      status:
        type: "string"
      meta:
        type: "object"
        properties: {}
      updatedAt:
        type: "string"
      persistedFields:
        type: "array"
        items:
          type: "string"
    title: "Job Details"
    example:
      workUnitsCount: 0
      meta: "{}"
      adminId: "adminId"
      name: "name"
      id: "id"
      persistedFields:
      - "persistedFields"
      - "persistedFields"
      status: "status"
      updatedAt: "updatedAt"
    x-stoplight:
      id: "job-details"
      name: "Job Details"
      public: true
  bulk-user-create:
    type: "object"
    properties:
      username:
        type: "string"
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      attributes:
        type: "array"
        items:
          type: "object"
          properties: {}
    title: "Bulk User Create"
    x-stoplight:
      id: "bulk-user-create"
      name: "Bulk User Create"
      public: true
  workday-fields:
    type: "object"
    properties:
      reportUrl:
        type: "string"
      name:
        type: "string"
    title: "Workday Fields"
    x-stoplight:
      id: "workday-fields"
      name: "Workday Fields"
      public: true
  inline_response_204:
    properties:
      id:
        type: "string"
    example:
      id: "id"
  UserGroupPost_attributes_posixGroups:
    properties:
      id:
        type: "integer"
      name:
        type: "string"
    example:
      name: "name"
      id: 0
  UserGroupPost_attributes:
    properties:
      posixGroups:
        type: "array"
        items:
          $ref: "#/definitions/UserGroupPost_attributes_posixGroups"
      sambaEnabled:
        type: "boolean"
    description: "The group object's attributes."
    example:
      sambaEnabled: true
      posixGroups:
      - name: "name"
        id: 0
      - name: "name"
        id: 0
  PolicyTemplateConfigField_tooltip_variables:
    properties:
      icon:
        type: "string"
      message:
        type: "string"
    example:
      icon: "icon"
      message: "message"
  PolicyTemplateConfigField_tooltip:
    properties:
      template:
        type: "string"
      variables:
        $ref: "#/definitions/PolicyTemplateConfigField_tooltip_variables"
    example:
      template: "template"
      variables:
        icon: "icon"
        message: "message"
  PolicyRequest_template:
    properties:
      id:
        type: "string"
        description: "ObjectId uniquely identifying a Policy instance; only allowed\
          \ on POST requests."
    example:
      id: "id"
  workdayoutput_auth:
    properties:
      basic:
        $ref: "#/definitions/auth-info"
      oauth:
        $ref: "#/definitions/auth-info"
    example:
      basic:
        isValid: true
        expiry: "expiry"
        message: "message"
      oauth:
        isValid: true
        expiry: "expiry"
        message: "message"
  authinput_oauth:
    properties:
      code:
        type: "string"
  authinput_basic:
    properties:
      username:
        type: "string"
      password:
        type: "string"
  SystemGraphManagementReq_attributes_sudo:
    properties:
      enabled:
        type: "boolean"
      withoutPassword:
        type: "boolean"
    example:
      withoutPassword: true
      enabled: true
  SystemGraphManagementReq_attributes:
    properties:
      sudo:
        $ref: "#/definitions/SystemGraphManagementReq_attributes_sudo"
    description: "The graph connection's attributes"
    example:
      sudo:
        withoutPassword: true
        enabled: true
  UserGroupPut_attributes:
    properties:
      sambaEnabled:
        type: "boolean"
    description: "The group object's attributes."
    example:
      sambaEnabled: true
parameters:
  trait:limit:limit:
    name: "limit"
    in: "query"
    description: "The number of records to return at once. Limited to 100."
    required: false
    type: "integer"
    default: 10
    x-exportParamName: "Limit"
  trait:skip:skip:
    name: "skip"
    in: "query"
    description: "The offset into the records to return."
    required: false
    type: "integer"
    default: 0
    x-exportParamName: "Skip"
  trait:graphTargets:targets:
    name: "targets"
    in: "query"
    description: ""
    required: true
    type: "array"
    items:
      type: "string"
      enum:
      - "active_directory"
      - "application"
      - "command"
      - "g_suite"
      - "ldap_server"
      - "office_365"
      - "policy"
      - "radius_server"
      - "system"
      - "system_group"
      - "user"
      - "user_group"
    x-exportParamName: "Targets"
  trait:filter:filter:
    name: "filter"
    in: "query"
    description: "Supported operators are: eq, ne, gt, ge, lt, le, between, search,\
      \ in"
    required: false
    type: "array"
    items:
      type: "string"
    x-exportParamName: "Filter"
  trait:sort:sort:
    name: "sort"
    in: "query"
    description: "The comma separated fields used to sort the collection.\nDefault\
      \ sort is ascending, prefix with `-` to sort descending.\n"
    required: false
    type: "array"
    items:
      type: "string"
    x-exportParamName: "Sort"
  trait:fields:fields:
    name: "fields"
    in: "query"
    description: "The comma separated fields included in the returned records.\nIf\
      \ omitted the default list of fields will be returned.\n"
    required: false
    type: "array"
    items:
      type: "string"
    x-exportParamName: "Fields"
  trait:requestHeaders:Content-Type:
    name: "Content-Type"
    in: "header"
    required: true
    type: "string"
    default: "application/json"
    x-exportParamName: "ContentType"
  trait:requestHeaders:Accept:
    name: "Accept"
    in: "header"
    required: true
    type: "string"
    default: "application/json"
    x-exportParamName: "Accept"
  trait:aggregate:aggregate:
    name: "aggregate"
    in: "query"
    required: false
    type: "array"
    items:
      type: "string"
    x-exportParamName: "Aggregate"
  trait:systemContextAuth:Date:
    name: "Date"
    in: "header"
    description: "Current date header for the System Context API"
    required: false
    type: "string"
    x-exportParamName: "Date"
  trait:systemContextAuth:Authorization:
    name: "Authorization"
    in: "header"
    description: "Authorization header for the System Context API"
    required: false
    type: "string"
    x-exportParamName: "Authorization"
  trait:listCount:x-total-count:
    name: "x-total-count"
    in: "header"
    required: false
    type: "integer"
  trait:graphSystemTargets:targets:
    name: "targets"
    in: "query"
    description: ""
    required: true
    type: "array"
    items:
      type: "string"
      enum:
      - "active_directory"
      - "application"
      - "command"
      - "g_suite"
      - "ldap_server"
      - "office_365"
      - "policy"
      - "radius_server"
      - "user"
      - "user_group"
    x-exportParamName: "Targets"
  trait:graphUserTargets:targets:
    name: "targets"
    in: "query"
    description: ""
    required: true
    type: "array"
    items:
      type: "string"
      enum:
      - "active_directory"
      - "application"
      - "command"
      - "g_suite"
      - "ldap_server"
      - "office_365"
      - "policy"
      - "radius_server"
      - "system"
      - "system_group"
    x-exportParamName: "Targets"
  trait:graphUserGroupTargets:targets:
    name: "targets"
    in: "query"
    description: ""
    required: true
    type: "array"
    items:
      type: "string"
      enum:
      - "active_directory"
      - "application"
      - "command"
      - "g_suite"
      - "ldap_server"
      - "office_365"
      - "policy"
      - "radius_server"
      - "system"
      - "system_group"
    x-exportParamName: "Targets"
  trait:graphSystemGroupTargets:targets:
    name: "targets"
    in: "query"
    description: ""
    required: true
    type: "array"
    items:
      type: "string"
      enum:
      - "active_directory"
      - "application"
      - "command"
      - "g_suite"
      - "ldap_server"
      - "office_365"
      - "policy"
      - "radius_server"
      - "user"
      - "user_group"
    x-exportParamName: "Targets"
x-stoplight:
  beforeScript: ""
  afterScript: ""
  version:
    groups:
      docs:
      - divider: false
        items:
        - _id: "v2-api"
          type: "docTextSections"
        name: "API Overview"
      - divider: false
        items:
        - _id: "authentication-and-authorization-overview"
          type: "docTextSections"
        - _id: "system-context"
          type: "docTextSections"
        - _id: "multi-tenant-organization-api-header"
          type: "docTextSections"
        name: "Authentication & Authorization"
        description: ""
      - divider: false
        items:
        - _id: "graph_activeDirectoryAssociationsPost"
          type: "endpoints"
        - _id: "activedirectories_post"
          type: "endpoints"
        - _id: "activedirectories_list"
          type: "endpoints"
        - _id: "activedirectories_delete"
          type: "endpoints"
        - _id: "graph_activeDirectoryTraverseUserGroup"
          type: "endpoints"
        - _id: "activedirectories_get"
          type: "endpoints"
        - _id: "graph_activeDirectoryAssociationsList"
          type: "endpoints"
        name: "Active Directory"
        description: "You can associate your groups of users to Active Directory."
      - divider: false
        description: "You can associate your Groups of Users with Applications that\
          \ are SSO enabled for easy access via JumpCloud's User Portal.\n\nPlease\
          \ see [this page](https://jumpcloud.com/daas-product/sso-single-sign-on)\
          \ for a full list of supported SSO apps."
        name: "Applications"
        items:
        - _id: "oSvkKjXMXDRCDigPW"
          type: "endpoints"
        - _id: "graph_applicationAssociationsPost"
          type: "endpoints"
        - _id: "graph_applicationAssociationsList"
          type: "endpoints"
        - _id: "graph_applicationTraverseUser"
          type: "endpoints"
        - _id: "graph_applicationTraverseUserGroup"
          type: "endpoints"
        - _id: "GpsCqv5EJe7C8g3gi"
          type: "endpoints"
      - divider: false
        items:
        - _id: "bulk_usersCreateResults"
          type: "endpoints"
        - _id: "bulk_usersCreate"
          type: "endpoints"
        - _id: "jobs_results"
          type: "endpoints"
        - _id: "jobs_get"
          type: "endpoints"
        name: "Bulk Job Requests"
      - divider: false
        description: "You can associate your Groups of Users or Systems with Commands.\n\
          \nPlease see [this page](https://support.jumpcloud.com/customer/portal/articles/2443893-using-the-commands-tab)\
          \ for more information on Commands."
        name: "Commands"
        items:
        - _id: "4b2YvGPq7gRTpuNsk"
          type: "endpoints"
        - _id: "cubfZCh9HKWWqnSR7"
          type: "endpoints"
        - _id: "graph_commandAssociationsPost"
          type: "endpoints"
        - _id: "graph_commandAssociationsList"
          type: "endpoints"
        - _id: "graph_commandTraverseSystem"
          type: "endpoints"
        - _id: "graph_commandTraverseSystemGroup"
          type: "endpoints"
        - _id: "AC9tCEFMSDqk9hFKD"
          type: "schemas"
        - _id: "TkDovo4uYnDm6qNyj"
          type: "schemas"
        - _id: "5jEQyXrx8qSkQMm9q"
          type: "schemas"
        - _id: "Qs6Z9YexBXkHyTsPs"
          type: "schemas"
        - _id: "bbn5ztJs444czn3y7"
          type: "schemas"
        - _id: "aTdhv6ygRuaJZWEJp"
          type: "schemas"
        - _id: "WbYr4KDRGCQ2oj5wM"
          type: "schemas"
        - _id: "RCxMohSZD4WvRxB6e"
          type: "schemas"
        - _id: "p7ZrNkR7taQZ8xo5D"
          type: "schemas"
        - _id: "RRyEu9v9r8HRpGRHm"
          type: "schemas"
        - _id: "hXuvCC7TpQpMcoorZ"
          type: "schemas"
        - _id: "iGqpCFo43kXixJ4KE"
          type: "schemas"
        - _id: "cSMXzBSc73d3wLynW"
          type: "schemas"
        - _id: "QeMiCzxyEWwWb2BhL"
          type: "schemas"
        - _id: "fkLhQizgqFPsieegx"
          type: "schemas"
        - _id: "GYBhpRAqNLXBvTkfd"
          type: "schemas"
        - _id: "wBsqbJSy99t4xbq8f"
          type: "schemas"
        - _id: "icghut8wyMFmSD2fc"
          type: "schemas"
        - _id: "3YZP8o94zNs3TboQC"
          type: "schemas"
        - _id: "ar4AvRE4hLCyR3C5f"
          type: "schemas"
        - _id: "W9GEzqnBsESKuvRwp"
          type: "schemas"
        - _id: "J8Ju9fhzBZh5E94nH"
          type: "schemas"
      - divider: false
        description: "You can associate your groups of users or systems with Directories.\
          \ (LDAP, Office 365, or G-Suite.)\n\nPlease see [this page](https://jumpcloud.com/daas-product/directory-services)\
          \ for more information on JumpCloud's Directories Services."
        name: "Directories"
        items:
        - _id: "xaK74AR4z9LZSWQjy"
          type: "endpoints"
        - _id: "directories_list"
          type: "endpoints"
        - _id: "bt7NrBLGW3hjTcqFu"
          type: "endpoints"
        - _id: "fKHEZEPiAoAjdNnrs"
          type: "endpoints"
        - type: "endpoints"
          _id: "p78rXxMWTeeRazsHw"
      - divider: false
        description: "Groups are designed to enhance JumpCloud's existing grouping\
          \ functionality which relied heavily on flexible “tags” to allow you to\
          \ organize users, systems and applications into hierarchies.\n\nOur Tagging\
          \ functionality worked well in the early days of JumpCloud, but as our our\
          \ users became more sophisticated, and our product’s reach has expanding\
          \ deeper into IT infrastructure we thought it was time to offer a more traditional\
          \ way of managing a directory’s hierarchy.\n\nYou can find more information\
          \ on Groups on [this page](https://support.jumpcloud.com/customer/en/portal/articles/2703450-getting-started-groups)."
        name: "Groups"
        items:
        - _id: "byrbFjvbPaELLWEm9"
          type: "endpoints"
        - _id: "groups_list"
          type: "endpoints"
      - divider: false
        description: "You can associate your Groups of Users to G-Suite.\nPlease see\
          \ [this page](https://support.jumpcloud.com/customer/portal/articles/2426953)\
          \ for more information on G-Suite."
        name: "G Suite"
        items:
        - _id: "FDG6kMMJrX3kMJ9cn"
          type: "endpoints"
        - _id: "SSStLReXcKe4Dr4LD"
          type: "endpoints"
        - _id: "graph_gSuiteAssociationsPost"
          type: "endpoints"
        - _id: "graph_gSuiteAssociationsList"
          type: "endpoints"
        - _id: "graph_gSuiteTraverseUser"
          type: "endpoints"
        - _id: "graph_gSuiteTraverseUserGroup"
          type: "endpoints"
      - divider: false
        description: "You can associate your groups of users to LDAP.   Please see\
          \ [this page](https://support.jumpcloud.com/customer/en/portal/topics/926832-ldap-as-a-service)\
          \ for more information on LDAP."
        name: "LDAP Servers"
        items:
        - _id: "DG46bmf92DFRKBRuE"
          type: "endpoints"
        - _id: "XuTD8jvsNtCrbu3Sa"
          type: "endpoints"
        - _id: "graph_ldapServerAssociationsPost"
          type: "endpoints"
        - _id: "graph_ldapServerAssociationsList"
          type: "endpoints"
        - _id: "graph_ldapServerTraverseUser"
          type: "endpoints"
        - _id: "graph_ldapServerTraverseUserGroup"
          type: "endpoints"
        - _id: "ldapservers_list"
          type: "endpoints"
        - _id: "ldapservers_get"
          type: "endpoints"
      - divider: false
        description: "You can associate your groups of users to Office 365.   Please\
          \ see [this page](https://support.jumpcloud.com/customer/en/portal/topics/926836-office-365-integration)\
          \ for more information on Office 365."
        name: "Office 365"
        items:
        - _id: "A7g5bR8ox8wEBLB6d"
          type: "endpoints"
        - _id: "graph_office365AssociationsPost"
          type: "endpoints"
        - _id: "graph_office365AssociationsList"
          type: "endpoints"
        - _id: "graph_office365TraverseUser"
          type: "endpoints"
        - _id: "graph_office365TraverseUserGroup"
          type: "endpoints"
      - divider: false
        description: "Jumpcloud provides a library of policy templates for Windows,\
          \ Mac and Linux which provide administrators the capability to set security\
          \ features or apply uniform configurations across a range of systems. These\
          \ endpoints allow you to interact with our Policies feature via the JumpCloud\
          \ API."
        name: "Policies"
        items:
        - _id: "3j7iRXfuA4cJrRJi8"
          type: "endpoints"
        - _id: "policies_list"
          type: "endpoints"
        - _id: "policies_post"
          type: "endpoints"
        - _id: "policies_get"
          type: "endpoints"
        - _id: "policies_put"
          type: "endpoints"
        - _id: "policies_delete"
          type: "endpoints"
        - _id: "policyresults_list"
          type: "endpoints"
        - _id: "policystatuses_list"
          type: "endpoints"
        - _id: "graph_policyTraverseSystem"
          type: "endpoints"
        - _id: "graph_policyTraverseSystemGroup"
          type: "endpoints"
        - _id: "graph_policyAssociationsList"
          type: "endpoints"
        - _id: "graph_policyAssociationsPost"
          type: "endpoints"
        - _id: "policytemplates_list"
          type: "endpoints"
        - _id: "policytemplates_get"
          type: "endpoints"
        - _id: "policyresults_list"
          type: "endpoints"
        - _id: "policyresults_get"
          type: "endpoints"
      - divider: false
        description: "You can associate your groups of users to Radius Servers.  \
          \ Please see [this page](https://support.jumpcloud.com/customer/en/portal/topics/926833-radius-as-a-service)\
          \ for more information on Radius."
        name: "RADIUS Servers"
        items:
        - _id: "graph_radiusServerAssociationsPost"
          type: "endpoints"
        - _id: "graph_radiusServerAssociationsList"
          type: "endpoints"
        - _id: "graph_radiusServerTraverseUser"
          type: "endpoints"
        - _id: "graph_radiusServerTraverseUserGroup"
          type: "endpoints"
      - name: "Samba Domains"
        divider: false
        items:
        - _id: "ldapservers_sambaDomainsPost"
          type: "endpoints"
        - _id: "ldapservers_sambaDomainsPut"
          type: "endpoints"
        - _id: "ldapservers_sambaDomainsDelete"
          type: "endpoints"
        - _id: "ldapservers_sambaDomainsList"
          type: "endpoints"
        - _id: "ldapservers_sambaDomainsGet"
          type: "endpoints"
      - divider: false
        description: "You can associate your Groups of Users with systems.\n\nTo obtain\
          \ your System IDs, you can use our [V1 Endpoints for Systems](https://docs.jumpcloud.com/1.0/systemusers).\n\
          \nPlease see [this page](https://support.jumpcloud.com/customer/en/portal/articles/2703450-getting-started-groups)\
          \ for more information on Groups and Systems."
        name: "Systems"
        items:
        - _id: "4DjML5aWZnY3GXcDM"
          type: "endpoints"
        - _id: "Zdf254ynsk9DJR9oL"
          type: "endpoints"
        - _id: "graph_systemAssociationsPost"
          type: "endpoints"
        - _id: "graph_systemMemberOf"
          type: "endpoints"
        - _id: "graph_systemAssociationsList"
          type: "endpoints"
        - _id: "graph_systemTraversePolicy"
          type: "endpoints"
        - _id: "graph_systemTraverseUser"
          type: "endpoints"
        - _id: "graph_systemTraverseCommand"
          type: "endpoints"
        - _id: "graph_systemTraverseUserGroup"
          type: "endpoints"
        - _id: "policystatuses_list"
          type: "endpoints"
      - divider: false
        description: "System Groups are designed to enhance JumpCloud's existing grouping\
          \ functionality which relied heavily on flexible “tags” to allow you to\
          \ organize users, systems and applications into hierarchies.\n\nWith System\
          \ Groups you can easily group Systems together and assign them to Groups\
          \ of Users.\n\nYou can find more information on Groups on [this page](https://support.jumpcloud.com/customer/en/portal/articles/2703450-getting-started-groups)."
        name: "System Groups"
        items:
        - _id: "e3ufsPvtsKCqCmPpA"
          type: "endpoints"
        - _id: "m5hjYe7nHomt75ghs"
          type: "endpoints"
        - _id: "jPih8cFWBWkA6x3cJ"
          type: "endpoints"
        - _id: "k3wxKsnGWNg6EhpnJ"
          type: "endpoints"
        - _id: "groups_system_post"
          type: "endpoints"
        - _id: "groups_system_put"
          type: "endpoints"
        - _id: "groups_system_patch"
          type: "endpoints"
        - _id: "groups_system_delete"
          type: "endpoints"
        - _id: "groups_system_list"
          type: "endpoints"
        - _id: "groups_system_get"
          type: "endpoints"
      - divider: false
        items:
        - _id: "graph_systemGroupMembersPost"
          type: "endpoints"
        - _id: "graph_systemGroupMemberOf"
          type: "endpoints"
        - _id: "graph_systemGroupMembership"
          type: "endpoints"
        - _id: "graph_systemGroupMembersList"
          type: "endpoints"
        name: "System Group Members & Membership"
        description: "Any Directory Object that supports grouping also has the ability\
          \ to allow management of the group members. This includes listing, adding\
          \ and removing Directory Objects and Groups of Directory Objects to and\
          \ from the Group. These endpoints allow you to control the members and membership\
          \ of System Objects.\n\nMembers are the direct objects of an object group.\
          \ \n\nMembership is defined as the direct and indirect members of an object\
          \ group."
      - divider: false
        items:
        - _id: "graph_systemGroupAssociationsPost"
          type: "endpoints"
        - _id: "graph_systemGroupTraverseUser"
          type: "endpoints"
        - _id: "graph_systemGroupTraverseUserGroup"
          type: "endpoints"
        - _id: "graph_systemGroupTraversePolicy"
          type: "endpoints"
        - _id: "graph_systemGroupAssociationsList"
          type: "endpoints"
        - _id: "graph_systemGroupTraverseCommand"
          type: "endpoints"
        description: "Directory Objects can be associated to one another to create\
          \ bidirectional member associations, i.e. users to systems, commands to\
          \ systems, users to applications, etc.  JumpCloud controls the types of\
          \ Directory Objects that exist and the pairings that can exist; but with\
          \ these set of endpoints we will allow you to leverage the JumpCloud Graph\
          \ to have more control over your System Group Associations."
        name: "System Group Associations"
      - divider: false
        description: "You can associate your Users with groups of Users, Systems,\
          \ Applications, Radius Servers, Commands and Directories.\n\nTo obtain you\
          \ your User IDs, you can use our V1 Endpoints for [System Users](https://docs.jumpcloud.com/1.0/systemusers)\n\
          \nPlease see [this page](https://support.jumpcloud.com/customer/en/portal/articles/2703450-getting-started-groups)\
          \ for more information on Groups and Systems."
        name: "Users"
        items:
        - _id: "5aNya5RzjgJed6BmL"
          type: "endpoints"
        - _id: "XpjQonbguJ55dy4TQ"
          type: "endpoints"
        - _id: "4uQMx676oTq4RTqF2"
          type: "endpoints"
        - _id: "BHuLmHMsdsTkF5f6H"
          type: "endpoints"
        - _id: "graph_userAssociationsPost"
          type: "endpoints"
        - _id: "graph_userMemberOf"
          type: "endpoints"
        - _id: "graph_userAssociationsList"
          type: "endpoints"
        - _id: "graph_userTraverseApplication"
          type: "endpoints"
        - _id: "graph_userTraverseDirectory"
          type: "endpoints"
        - _id: "graph_userTraverseGSuite"
          type: "endpoints"
        - _id: "graph_userTraverseLdapServer"
          type: "endpoints"
        - _id: "graph_userTraverseOffice365"
          type: "endpoints"
        - _id: "graph_userTraverseSystem"
          type: "endpoints"
        - _id: "graph_userTraverseRadiusServer"
          type: "endpoints"
        - _id: "graph_userTraverseSystemGroup"
          type: "endpoints"
      - divider: false
        description: "User Groups are designed to enhance JumpCloud's existing grouping\
          \ functionality which relied heavily on flexible “tags” to allow you to\
          \ organize users, systems and applications into hierarchies.\n\nWith User\
          \ Groups you can easily group Users together and assign them to Systems.\n\
          \nYou can find more information on Groups on [this page](https://support.jumpcloud.com/customer/en/portal/articles/2703450-getting-started-groups)."
        name: "User Groups"
        items:
        - _id: "groups_user_post"
          type: "endpoints"
        - _id: "groups_user_put"
          type: "endpoints"
        - _id: "groups_user_patch"
          type: "endpoints"
        - _id: "groups_user_delete"
          type: "endpoints"
        - _id: "vycgDSzsLqZ4Ntdjk"
          type: "endpoints"
        - _id: "ExyRxHQtM8tZCmKiS"
          type: "endpoints"
        - _id: "HxDaihcTN24XfxTYT"
          type: "endpoints"
        - _id: "ycnNWjNDDW7b94ch2"
          type: "endpoints"
        - _id: "GbLmbD8YRLFqhaab8"
          type: "endpoints"
        - _id: "gF7r9PNuQ2PCkazSW"
          type: "endpoints"
        - _id: "h6EK4LxjcAFCx5pE2"
          type: "endpoints"
        - _id: "groups_user_list"
          type: "endpoints"
        - _id: "groups_user_get"
          type: "endpoints"
      - divider: false
        items:
        - _id: "graph_userGroupMembersPost"
          type: "endpoints"
        - _id: "graph_userGroupMemberOf"
          type: "endpoints"
        - _id: "graph_userGroupMembership"
          type: "endpoints"
        - _id: "graph_userGroupMembersList"
          type: "endpoints"
        name: "User Group Members & Membership"
        description: "Any Directory Object that supports grouping also has the ability\
          \ to allow management of the group members. This includes listing, adding\
          \ and removing Directory Objects and Groups of Directory Objects to and\
          \ from the Group. These endpoints allow you to control the members and membership\
          \ of User Objects.\n\nMembers are the direct objects of an object group.\
          \ \n\nMembership is defined as the direct and indirect members of an object\
          \ group."
      - divider: false
        items:
        - _id: "graph_userGroupAssociationsPost"
          type: "endpoints"
        - _id: "graph_userGroupTraverseActiveDirectory"
          type: "endpoints"
        - _id: "graph_userGroupTraverseSystemGroup"
          type: "endpoints"
        - _id: "graph_userGroupAssociationsList"
          type: "endpoints"
        - _id: "graph_userGroupTraverseSystem"
          type: "endpoints"
        - _id: "graph_userGroupTraverseRadiusServer"
          type: "endpoints"
        - _id: "graph_userGroupTraverseOffice365"
          type: "endpoints"
        - _id: "graph_userGroupTraverseLdapServer"
          type: "endpoints"
        - _id: "graph_userGroupTraverseGSuite"
          type: "endpoints"
        - _id: "graph_userGroupTraverseDirectory"
          type: "endpoints"
        - _id: "graph_userGroupTraverseApplication"
          type: "endpoints"
        name: "User Group Associations"
        description: "Directory Objects can be associated to one another to create\
          \ bidirectional membership associations, i.e. users to systems, commands\
          \ to systems, users to applications, etc. JumpCloud controls the types of\
          \ Directory Objects that exist and the pairings that can exist; but with\
          \ these set of endpoints we will allow you to leverage the JumpCloud Graph\
          \ to have more control over your User Group Associations."
      - divider: false
        items:
        - _id: "workdays_delete"
          type: "endpoints"
        - _id: "workdays_post"
          type: "endpoints"
        - _id: "workdays_get"
          type: "endpoints"
        - _id: "workdays_list"
          type: "endpoints"
        - _id: "workdays_put"
          type: "endpoints"
        - _id: "workdays_workers"
          type: "endpoints"
        - _id: "workdays_authorize"
          type: "endpoints"
        - _id: "workdays_deauthorize"
          type: "endpoints"
        - _id: "workdays_importresults"
          type: "endpoints"
        - _id: "workdays_import"
          type: "endpoints"
        - _id: "workdays_settings"
          type: "endpoints"
        name: "Workday Import"
      - name: "Models"
        description: "Models make up the core input and output structures in this\
          \ API. They are used in endpoint request and response bodies."
        items:
        - _id: "auth-info"
          type: "schemas"
        - _id: "auth-input"
          type: "schemas"
        - _id: "auth-input-object"
          type: "schemas"
        - _id: "active-directory-output"
          type: "schemas"
        - _id: "active-directory-input"
          type: "schemas"
        - _id: "bulk-user-create"
          type: "schemas"
        - _id: "Directory"
          type: "schemas"
        - _id: "Error"
          type: "schemas"
        - _id: "GraphConnection"
          type: "schemas"
        - _id: "GraphManagementReq"
          type: "schemas"
        - _id: "GraphObject"
          type: "schemas"
        - _id: "GraphObjectWithPaths"
          type: "schemas"
        - _id: "GraphType"
          type: "schemas"
        - _id: "Group"
          type: "schemas"
        - _id: "GroupType"
          type: "schemas"
        - _id: "job-id"
          type: "schemas"
        - _id: "job-details"
          type: "schemas"
        - _id: "job-workresult"
          type: "schemas"
        - _id: "ldap-server-input"
          type: "schemas"
        - _id: "ldap-server-output"
          type: "schemas"
        - _id: "oauth-code-input"
          type: "schemas"
        - _id: "Policy"
          type: "schemas"
        - _id: "PolicyRequest"
          type: "schemas"
        - _id: "PolicyResult"
          type: "schemas"
        - _id: "PolicyTemplateConfigField"
          type: "schemas"
        - _id: "PolicyTemplate"
          type: "schemas"
        - _id: "PolicyTemplateWithDetails"
          type: "schemas"
        - _id: "PolicyValue"
          type: "schemas"
        - _id: "PolicyWithDetails"
          type: "schemas"
        - _id: "samba-domain-input"
          type: "schemas"
        - _id: "samba-domain-output"
          type: "schemas"
        - _id: "SystemGraphManagementReq"
          type: "schemas"
        - _id: "SystemGroup"
          type: "schemas"
        - _id: "SystemGroupData"
          type: "schemas"
        - _id: "SystemGroupMembersReq"
          type: "schemas"
        - _id: "SystemGroupGraphManagementReq"
          type: "schemas"
        - _id: "UserGroup"
          type: "schemas"
        - _id: "UserGraphManagementReq"
          type: "schemas"
        - _id: "UserGroupGraphManagementReq"
          type: "schemas"
        - _id: "UserGroupMembersReq"
          type: "schemas"
        - _id: "UserGroupPut"
          type: "schemas"
        - _id: "UserGroupPost"
          type: "schemas"
        - _id: "hitWKRiHhPaZpAx7q"
          type: "schemas"
        - _id: "HaivXzJCYeryM9e35"
          type: "schemas"
        - _id: "workday-fields"
          type: "schemas"
        - _id: "workday-input"
          type: "schemas"
        - _id: "workday-output"
          type: "schemas"
        - _id: "workday-request"
          type: "schemas"
        - _id: "workday-worker"
          type: "schemas"
        - _id: "RY8pzvgBAsxtLMcXz"
          type: "schemas"
        - _id: "RaTvCDQQ3CezKdm3f"
          type: "schemas"
        divider: false
      - name: "Traits"
        description: "These Traits describe  the common behaviors or structures in\
          \ this API."
        items:
        - _id: "aggregate"
          type: "traits"
        - _id: "fields"
          type: "traits"
        - _id: "filter"
          type: "traits"
        - _id: "graphSystemTargets"
          type: "traits"
        - _id: "graphSystemGroupTargets"
          type: "traits"
        - _id: "graphTargets"
          type: "traits"
        - _id: "graphUserGroupTargets"
          type: "traits"
        - _id: "graphUserTargets"
          type: "traits"
        - _id: "limit"
          type: "traits"
        - _id: "listCount"
          type: "traits"
        - _id: "skip"
          type: "traits"
        - _id: "sort"
          type: "traits"
        - _id: "requestHeaders"
          type: "traits"
        - _id: "systemContextAuth"
          type: "traits"
        divider: false
      traits: []
      tests: []
      savedEntries: []
      utilFuncs: []
  functions: {}
  textSections:
    v2-api:
      id: "v2-api"
      name: "V2 API"
      content: "#### Directory Objects \n\nOur new API offers the ability to interact\
        \ with some of our core features; otherwise known as Directory Objects. The\
        \ Directory Objects are:\n\n* Commands\n* Policies\n* Applications\n* Systems\n\
        * Users\n* User Groups \n* System Groups\n* Radius Servers\n* Directories:\
        \ Office 365, LDAP,G-Suite, Active Directory \n\nThe Directory Object is an\
        \ important concept to understand in order to successfully use JumpCloud APIs.\
        \ \n\n#### JumpCloud Graph\n\nWe've also introduced the concept of the JumpCloud\
        \ Graph along with  Directory Objects. The Graph is a powerful aspect of our\
        \ platform which will enable you to associate objects with each other, or\
        \ establish membership for certain objects to become members of other objects.\n\
        \nSpecific `GET` endpoints will allow you to traverse the JumpCloud Graph\
        \ to return all indirect and directly bound objects in your organization.\
        \ \n\n\n##### JumpCloud Graph Model Example\n\nThe diagram below highlights\
        \ our association and membership model as it relates to Directory Objects.\
        \ \n\n![alt text](https://s3.amazonaws.com/jumpcloud-kb/Knowledge+Base+Photos/API+Docs/jumpcloud_graph.png\
        \ \"JumpCloud Graph Model Example\")\n\n\n#### API Considerations\n\nWe are\
        \ currently in the process of migrating our [API V1](https://docs.jumpcloud.com/1.0)\
        \  features to API V2. Depending on your type of integration you may be required\
        \ to use both V1 and V2 APIs.\n\nPlease refer to our [API V1](https://docs.jumpcloud.com/1.0)\
        \ docs to understand the functionality still available in that API set.\n\n\
        #### API SDKS\n\nYou can find language specific SDKs that can help you kickstart\
        \ your Integration with JumpCloud in the following GitHub Repos: \n\n* [Python](https://github.com/TheJumpCloud/jcapi-python)\n\
        * [Go](https://github.com/TheJumpCloud/jcapi-go)\n* [Ruby](https://github.com/TheJumpCloud/jcapi-ruby)\n\
        * [Java](https://github.com/TheJumpCloud/jcapi-java)"
      public: true
    authentication-and-authorization-overview:
      id: "authentication-and-authorization-overview"
      name: "API Key"
      content: "#### Access your API Key\n\nTo locate your API Key:\n1. Log into the\
        \ [JumpCloud Admin Console](https://console.jumpcloud.com/) \n2. Go to the\
        \ username drop down located in the top-right of the Console. \n3. Retrieve\
        \ your API key from API Settings.\n\n#### API Key Considerations\n\nThis API\
        \ key is associated to the currently logged in administrator. Other admins\
        \ will have different API keys.\n\nPlease keep this API key secret, as it\
        \ grants full access to any data accessible via your JumpCloud console account.\n\
        \nYou can also reset your API key in the same location in the JumpCloud Admin\
        \ Console.\n\n\n##### Recycling or Reseting your API Key\n\nIn order to revoke\
        \ access with the current API key, simply reset your API key. This will render\
        \ all calls using the previous API key inaccessible.\n\nFor API V2 the API\
        \ key will be passed in as a header with the header name \"x-api-key\".\n\n\
        **Example**\n```\ncurl -H \"x-api-key: [YOUR_API_KEY_HERE]\" \"https://console.jumpcloud.com/api/v2/systemgroups\"\
        \n```"
      public: true
    system-context:
      id: "system-context"
      name: "System Context"
      content: "* [Introduction](#introduction)\n* [Supported Endpoints](#endpoints)\n\
        * [Authentication](#authentication)\n* [Data structures](#data-structures)\n\
        * [Examples](#additional-examples)\n* [Third party](#third-party)\n\n### Introduction\n\
        \nJumpCloud System Context Authorization is an alternative way to authenticate\
        \ with a subset of JumpCloud's REST APIs. Using this method a system can manage\
        \ its information and resource associations, allowing modern auto provisioning\
        \ environments to scale as needed.\n\n**Note: The following documentation\
        \ applies to Linux Operating Systems only.**\n\n### Supported Endpoints \n\
        \nJumpCloud System Context Authorizationcan be used in conjunction with Systems\
        \ endpoints found in the V1 API and certain System Group endpoints found in\
        \ the v2 API.\n\n- A system may fetch, alter, and delete metatdata about itself,\
        \ including manipulating a system's Group and Systemuser associations, \n\
        \  - `/api/systems/{system_id}` | [`GET`](https://docs.jumpcloud.com/1.0/systems/list-an-individual-system)\
        \ [`PUT`](https://docs.jumpcloud.com/1.0/systems/update-a-system)\n- A system\
        \ may delete itself from your JumpCloud organization\n  - `/api/systems/{system_id}`\
        \ | [`DELETE`](https://docs.jumpcloud.com/1.0/systems/delete-a-system)\n-\
        \ A system may fetch it's direct resource associations under v2 (Groups)\n\
        \  - `/api/v2/systems/{system_id}/memberof` | [`GET`](https://docs.jumpcloud.com/2.0/systems/list-a-systems-group-membership)\n\
        \  - `/api/v2/systems/{system_id}/associations` | [`GET`](https://docs.jumpcloud.com/2.0/systems/list-associations-of-a-system)\n\
        \  - `/api/v2/systems/{system_id}/users` | [`GET`](https://docs.jumpcloud.com/2.0/systems/list-the-users-associated-with-a-system)\n\
        - A system may alter it's direct resource associations under v2 (Groups)\n\
        \  - `/api/v2/systems/{system_id}/associations` | [`POST`](https://docs.jumpcloud.com/2.0/systems/manage-associations-of-a-system)\n\
        - A system may alter it's System Group associations\n  - `/api/v2/systemgroups/{systemgroup_id}/members`\
        \ | [`POST`](https://docs.jumpcloud.com/2.0/system-groups/update-a-system-group)\n\
        \    - _NOTE_ If a system attempts to alter the system group membership of\
        \ a different system the request will be rejected\n\n\n### Response Codes\n\
        \nIf endpoints other than those described above are called using the System\
        \ Context API the server will return a `401` response.\n\n### Authentication\n\
        \nTo allow for secure access to our APIs, you must authenticate each API request.\n\
        JumpCloud System Context Authorization uses [HTTP Signatures](http://tools.ietf.org/html/draft-cavage-http-signatures-00)\
        \ to authenticate API requests. \nThe HTTP Signatures sent with each request\
        \ are similar to the signatures used by the Amazon Web Services REST API.\n\
        To help with the request-signing process, we have provided an [example bash\
        \ script](https://github.com/TheJumpCloud/SystemContextAPI/blob/master/examples/shell/SigningExample.sh).\
        \ You must be root, or have permissions to access the contents of the `/opt/jc`\
        \ directory to generate a signature.\n\n\nHere is a breakdown of the example\
        \ script, with explanations.\n\nThe first thing the script does is extract\
        \ the systemKey from the JSON formatted `/opt/jc/jcagent.conf` file.\n\n```\n\
        #!/bin/bash\n\nconf=\"`cat /opt/jc/jcagent.conf`\"\nregex=\"systemKey\\\"\
        :\\\"(\\w+)\\\"\"\n\nif [[ $conf =~ $regex ]] ; then\n  systemKey=\"${BASH_REMATCH[1]}\"\
        \nfi\n```\n\nThen the script retrieves the current date in the correct format.\n\
        \n```\nnow=`date -u \"+%a, %d %h %Y %H:%M:%S GMT\"`;\n```\n\nNext we build\
        \ a signing string to demonstrate the expected signature format. The signed\
        \ string must consist of the [request-line](http://tools.ietf.org/html/rfc2616#page-35)\
        \ and the date header, separated by a newline character.\n\n```\nsignstr=\"\
        GET /api/systems/${systemKey} HTTP/1.1\\ndate: ${now}\"\n```\n\nThe next step\
        \ is to calculate and apply the signature. This is a two-step process:\n\n\
        1. Create a signature from the signing string using the JumpCloud Agent private\
        \ key: ``printf \"$signstr\" | openssl dgst -sha256 -sign /opt/jc/client.key``\n\
        1. Then Base64-encode the signature string and trim off the newline characters:\
        \ ``| openssl enc -e -a | tr -d '\\n'``\n\nThe combined steps above result\
        \ in:\n\n```\nsignature=`printf \"$signstr\" | openssl dgst -sha256 -sign\
        \ /opt/jc/client.key | openssl enc -e -a | tr -d '\\n'` ;\n```\n\nFinally,\
        \ we make sure the API call sending the signature has the same Authorization\
        \ header and Date header values that were used in the signing string.\nThis\
        \ example API request simply requests the entire system record.\n\n```\ncurl\
        \ -iq \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"\
        \ \\\n  -H \"Date: ${now}\" \\\n  -H \"Authorization: Signature keyId=\\\"\
        system/${systemKey}\\\",headers=\\\"request-line date\\\",algorithm=\\\"rsa-sha256\\\
        \",signature=\\\"${signature}\\\"\" \\\n  --url https://console.jumpcloud.com/api/systems/${systemKey}\n\
        ```\n\n#### Input data\n\nAll PUT and POST methods should use the HTTP Content-Type\
        \ header with a value of 'application/json'. PUT methods are used for updating\
        \ a record. POST methods are used to create a record.\n\nThe following example\
        \ demonstrates how to update the `displayName` of the system.\n\n```\nsignstr=\"\
        PUT /api/systems/${systemKey} HTTP/1.1\\ndate: ${now}\"\nsignature=`printf\
        \ \"$signstr\" | openssl dgst -sha256 -sign /opt/jc/client.key | openssl enc\
        \ -e -a | tr -d '\\n'` ;\n\ncurl -iq \\\n  -d \"{\\\"displayName\\\" : \\\"\
        updated-system-name-1\\\"}\" \\\n  -X \"PUT\" \\\n  -H \"Content-Type: application/json\"\
        \ \\\n  -H \"Accept: application/json\" \\\n  -H \"Date: ${now}\" \\\n  -H\
        \ \"Authorization: Signature keyId=\\\"system/${systemKey}\\\",headers=\\\"\
        request-line date\\\",algorithm=\\\"rsa-sha256\\\",signature=\\\"${signature}\\\
        \"\" \\\n  --url https://console.jumpcloud.com/api/systems/${systemKey}\n\
        ```\n\n\n#### Output data\n\nAll results will be formatted as JSON.\n\nHere\
        \ is an abbreviated example of response output:\n\n```\n{\n  \"__v\": 0,\n\
        \  \"_id\": \"525ee96f52e144993e000015\",\n  \"agentServer\": \"lappy386\"\
        ,\n  \"agentVersion\": \"0.9.42\",\n  \"arch\": \"x86_64\",\n  \"connectionKey\"\
        : \"127.0.0.1_51812\",\n  \"displayName\": \"ubuntu-1204\",\n  \"firstContact\"\
        : \"2013-10-16T19:30:55.611Z\",\n  \"hostname\": \"ubuntu-1204\" \n  ...\n\
        ```\n\n\n### Additional Examples\n\n#### Signing authentication example\n\n\
        This example demonstrates how to make an authenticated request to fetch the\
        \ JumpCloud record for this system.\n\n[SigningExample.sh](https://github.com/TheJumpCloud/SystemContextAPI/blob/master/examples/shell/SigningExample.sh)\n\
        \n\n#### Shutdown hook \n\nThis example demonstrates how to make authenticated\
        \ request on system shutdown.\nUsing an init.d script registered at run level\
        \ 0, you can call the System Context API as the system is shutting down.\n\
        \n[Instance-shutdown-initd](/examples/instance-shutdown-initd) is an example\
        \ of an init.d script that only runs at system shutdown.\n\nAfter customizing\
        \ the [instance-shutdown-initd](https://github.com/TheJumpCloud/SystemContextAPI/blob/master/examples/instance-shutdown-initd)\
        \ script, you should install it on the system(s) running the JumpCloud agent...\n\
        \n1. Copy the modified [instance-shutdown-initd](https://github.com/TheJumpCloud/SystemContextAPI/blob/master/examples/instance-shutdown-initd)\
        \ to `/etc/init.d/instance-shutdown`\n2. On Ubuntu systems, run `update-rc.d\
        \ instance-shutdown defaults`. On RedHat/CentOS systems, run `chkconfig --add\
        \ instance-shutdown`\n\n\n### Third party\n\n#### Chef cookbooks\n\n[https://github.com/nshenry03/jumpcloud](https://github.com/nshenry03/jumpcloud)\n\
        \n[https://github.com/cjs226/jumpcloud](https://github.com/cjs226/jumpcloud)"
      public: true
    multi-tenant-organization-api-header:
      id: "multi-tenant-organization-api-header"
      name: "Multi Tenant Organization API Header"
      content: "The Multi-Tenant Organzation API Header is available for JumpCloud\
        \ Admins to use when making API requests from Organizations that have multiple\
        \ managed organizations. \n\nThe `x-org-id` is a required header for all multi-tenant\
        \ admins when making API requests to Jumpcloud as this header will define\
        \ what organization you would like to make the request for. \n\nPlease note\
        \ that Single Tenant Admins do not need to provide this header when making\
        \ an API request.\n \n #### Header Value\n \n `x-org-id`\n\n#### API Response\
        \ codes\n\n- `400` Malformed ID. \n- `401` ID not included for multi-tenant\
        \ admin\n- `403` ID included on unsupported route.\n- `404` Organization ID\
        \ Not Found.\n\n#### Sample Request\n```\ncurl -X GET https://console.jumpcloud.com/api/v2/directories\
        \ \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\
        \ \\\n  -H 'x-api-key: {API_KEY}' \\\n  -H 'x-org-id: {ORG_ID}'\n\n```\n\n\
        #### To obtain an indvidual Organization ID via the UI\n\nAs a prerequisite\
        \ your Primary Organization will need to be setup for Multi-Tenancy which\
        \ will give you access to the Multi-Tenant Organization Admin Portal.\n\n\
        1. Log into JumpCloud [Admin Console](https://console.jumpcloud.com). If you\
        \ are a multi-tenant Admin, you will automatically be routed to the Multi-Tenant\
        \ Admin Portal.\n2. From the Multi-Tenant Portal's primary navigation bar,\
        \ select the Organization you'd like to access.\n3. You will automatically\
        \ be routed to that Organization's Admin Console.\n4. Go to Settings in the\
        \ sub-tenant's primary navigation.\n5. You can obtain your Organization ID\
        \ below your Organization's Contact Information on the Settings page.\n\n\
        #### To obtain all Organization IDs via the API\n\n1. You can make an API\
        \ request to this endpoint using the API key of your Primary Organization.\
        \  `https://console.jumpcloud.com/api/organizations/` This will return all\
        \ your managed organizations.\n\n#### Sample Request\n```\ncurl -X GET \\\n\
        \  https://console.jumpcloud.com/api/organizations/ \\\n  -H 'Accept: application/json'\
        \ \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: {API_KEY}'\n\
        \n```"
      public: true
  mock:
    dynamic: false
    enabled: false
x-tests: {}
